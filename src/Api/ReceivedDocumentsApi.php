<?php
/**
 * ReceivedDocumentsApi
 * PHP version 5
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Storecove API
 *
 * Storecove API
 *
 * OpenAPI spec version: 2.0.1
 * Contact: apisupport@storecove.nl
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.24
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Deegitalbe\LaravelTrustupIoStorecove\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Deegitalbe\LaravelTrustupIoStorecove\ApiException;
use Deegitalbe\LaravelTrustupIoStorecove\Configuration;
use Deegitalbe\LaravelTrustupIoStorecove\HeaderSelector;
use Deegitalbe\LaravelTrustupIoStorecove\ObjectSerializer;

/**
 * ReceivedDocumentsApi Class Doc Comment
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ReceivedDocumentsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getReceivedDocument
     *
     * Get a new ReceivedDocument
     *
     * @param  string  $guid  The guid of the document that was received. This is the \&quot;document_guid\&quot; property of the \&quot;received_document\&quot; webhook. (required)
     * @param  string  $syntax  The syntax in which to receive the received document. (required)
     * @param  string  $version  The JSON content version date. The default is &#39;1970-01-01&#39; meaning you get all deprecated elements since nothing was deprecated before that ;). If you do not want deprecated elements, use a later date. Do not use a dynamic date, because that means when we deprecate elements they will disappear from our responses. Only used for &#39;json&#39; packaging, not for &#39;original&#39;. Not currently used for invoices, only for orders. (optional, default to 1970-01-01)
     * @return \Deegitalbe\LaravelTrustupIoStorecove\Model\Transportable
     *
     * @throws \Deegitalbe\LaravelTrustupIoStorecove\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function getReceivedDocument($guid, $syntax, $version = '1970-01-01')
    {
        [$response] = $this->getReceivedDocumentWithHttpInfo($guid, $syntax, $version);

        return $response;
    }

    /**
     * Operation getReceivedDocumentWithHttpInfo
     *
     * Get a new ReceivedDocument
     *
     * @param  string  $guid  The guid of the document that was received. This is the \&quot;document_guid\&quot; property of the \&quot;received_document\&quot; webhook. (required)
     * @param  string  $syntax  The syntax in which to receive the received document. (required)
     * @param  string  $version  The JSON content version date. The default is &#39;1970-01-01&#39; meaning you get all deprecated elements since nothing was deprecated before that ;). If you do not want deprecated elements, use a later date. Do not use a dynamic date, because that means when we deprecate elements they will disappear from our responses. Only used for &#39;json&#39; packaging, not for &#39;original&#39;. Not currently used for invoices, only for orders. (optional, default to 1970-01-01)
     * @return array of \Deegitalbe\LaravelTrustupIoStorecove\Model\Transportable, HTTP status code, HTTP response headers (array of strings)
     *
     * @throws \Deegitalbe\LaravelTrustupIoStorecove\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function getReceivedDocumentWithHttpInfo($guid, $syntax, $version = '1970-01-01')
    {
        $returnType = '\Deegitalbe\LaravelTrustupIoStorecove\Model\Transportable';
        $request = $this->getReceivedDocumentRequest($guid, $syntax, $version);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Deegitalbe\LaravelTrustupIoStorecove\Model\Transportable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getReceivedDocumentAsync
     *
     * Get a new ReceivedDocument
     *
     * @param  string  $guid  The guid of the document that was received. This is the \&quot;document_guid\&quot; property of the \&quot;received_document\&quot; webhook. (required)
     * @param  string  $syntax  The syntax in which to receive the received document. (required)
     * @param  string  $version  The JSON content version date. The default is &#39;1970-01-01&#39; meaning you get all deprecated elements since nothing was deprecated before that ;). If you do not want deprecated elements, use a later date. Do not use a dynamic date, because that means when we deprecate elements they will disappear from our responses. Only used for &#39;json&#39; packaging, not for &#39;original&#39;. Not currently used for invoices, only for orders. (optional, default to 1970-01-01)
     * @return \GuzzleHttp\Promise\PromiseInterface
     *
     * @throws \InvalidArgumentException
     */
    public function getReceivedDocumentAsync($guid, $syntax, $version = '1970-01-01')
    {
        return $this->getReceivedDocumentAsyncWithHttpInfo($guid, $syntax, $version)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getReceivedDocumentAsyncWithHttpInfo
     *
     * Get a new ReceivedDocument
     *
     * @param  string  $guid  The guid of the document that was received. This is the \&quot;document_guid\&quot; property of the \&quot;received_document\&quot; webhook. (required)
     * @param  string  $syntax  The syntax in which to receive the received document. (required)
     * @param  string  $version  The JSON content version date. The default is &#39;1970-01-01&#39; meaning you get all deprecated elements since nothing was deprecated before that ;). If you do not want deprecated elements, use a later date. Do not use a dynamic date, because that means when we deprecate elements they will disappear from our responses. Only used for &#39;json&#39; packaging, not for &#39;original&#39;. Not currently used for invoices, only for orders. (optional, default to 1970-01-01)
     * @return \GuzzleHttp\Promise\PromiseInterface
     *
     * @throws \InvalidArgumentException
     */
    public function getReceivedDocumentAsyncWithHttpInfo($guid, $syntax, $version = '1970-01-01')
    {
        $returnType = '\Deegitalbe\LaravelTrustupIoStorecove\Model\Transportable';
        $request = $this->getReceivedDocumentRequest($guid, $syntax, $version);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getReceivedDocument'
     *
     * @param  string  $guid  The guid of the document that was received. This is the \&quot;document_guid\&quot; property of the \&quot;received_document\&quot; webhook. (required)
     * @param  string  $syntax  The syntax in which to receive the received document. (required)
     * @param  string  $version  The JSON content version date. The default is &#39;1970-01-01&#39; meaning you get all deprecated elements since nothing was deprecated before that ;). If you do not want deprecated elements, use a later date. Do not use a dynamic date, because that means when we deprecate elements they will disappear from our responses. Only used for &#39;json&#39; packaging, not for &#39;original&#39;. Not currently used for invoices, only for orders. (optional, default to 1970-01-01)
     * @return \GuzzleHttp\Psr7\Request
     *
     * @throws \InvalidArgumentException
     */
    protected function getReceivedDocumentRequest($guid, $syntax, $version = '1970-01-01')
    {
        // verify the required parameter 'guid' is set
        if ($guid === null || (is_array($guid) && count($guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $guid when calling getReceivedDocument'
            );
        }
        // verify the required parameter 'syntax' is set
        if ($syntax === null || (is_array($syntax) && count($syntax) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $syntax when calling getReceivedDocument'
            );
        }
        if ($version !== null && ! preg_match('/^d{4}-d{2}-d{2}$/', $version)) {
            throw new \InvalidArgumentException('invalid value for "version" when calling ReceivedDocumentsApi.getReceivedDocument, must conform to the pattern /^d{4}-d{2}-d{2}$/.');
        }

        $resourcePath = '/received_documents/{guid}/{format}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($version !== null) {
            $queryParams['version'] = ObjectSerializer::toQueryValue($version);
        }

        // path params
        if ($guid !== null) {
            $resourcePath = str_replace(
                '{'.'guid'.'}',
                ObjectSerializer::toPathValue($guid),
                $resourcePath
            );
        }
        // path params
        if ($syntax !== null) {
            $resourcePath = str_replace(
                '{'.'syntax'.'}',
                ObjectSerializer::toPathValue($syntax),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if ($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if (is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation receiveDocument
     *
     * Receive a new Document
     *
     * @param  int  $legal_entity_id  The id of the LegalEntity for which the document was received. (required)
     * @param  \Deegitalbe\LaravelTrustupIoStorecove\Model\ReceivedDocumentCreate  $received_document  Received document to process. (required)
     * @return \Deegitalbe\LaravelTrustupIoStorecove\Model\ReceivedDocument
     *
     * @throws \Deegitalbe\LaravelTrustupIoStorecove\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function receiveDocument($legal_entity_id, $received_document)
    {
        [$response] = $this->receiveDocumentWithHttpInfo($legal_entity_id, $received_document);

        return $response;
    }

    /**
     * Operation receiveDocumentWithHttpInfo
     *
     * Receive a new Document
     *
     * @param  int  $legal_entity_id  The id of the LegalEntity for which the document was received. (required)
     * @param  \Deegitalbe\LaravelTrustupIoStorecove\Model\ReceivedDocumentCreate  $received_document  Received document to process. (required)
     * @return array of \Deegitalbe\LaravelTrustupIoStorecove\Model\ReceivedDocument, HTTP status code, HTTP response headers (array of strings)
     *
     * @throws \Deegitalbe\LaravelTrustupIoStorecove\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function receiveDocumentWithHttpInfo($legal_entity_id, $received_document)
    {
        $returnType = '\Deegitalbe\LaravelTrustupIoStorecove\Model\ReceivedDocument';
        $request = $this->receiveDocumentRequest($legal_entity_id, $received_document);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Deegitalbe\LaravelTrustupIoStorecove\Model\ErrorModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Deegitalbe\LaravelTrustupIoStorecove\Model\ReceivedDocument',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation receiveDocumentAsync
     *
     * Receive a new Document
     *
     * @param  int  $legal_entity_id  The id of the LegalEntity for which the document was received. (required)
     * @param  \Deegitalbe\LaravelTrustupIoStorecove\Model\ReceivedDocumentCreate  $received_document  Received document to process. (required)
     * @return \GuzzleHttp\Promise\PromiseInterface
     *
     * @throws \InvalidArgumentException
     */
    public function receiveDocumentAsync($legal_entity_id, $received_document)
    {
        return $this->receiveDocumentAsyncWithHttpInfo($legal_entity_id, $received_document)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation receiveDocumentAsyncWithHttpInfo
     *
     * Receive a new Document
     *
     * @param  int  $legal_entity_id  The id of the LegalEntity for which the document was received. (required)
     * @param  \Deegitalbe\LaravelTrustupIoStorecove\Model\ReceivedDocumentCreate  $received_document  Received document to process. (required)
     * @return \GuzzleHttp\Promise\PromiseInterface
     *
     * @throws \InvalidArgumentException
     */
    public function receiveDocumentAsyncWithHttpInfo($legal_entity_id, $received_document)
    {
        $returnType = '\Deegitalbe\LaravelTrustupIoStorecove\Model\ReceivedDocument';
        $request = $this->receiveDocumentRequest($legal_entity_id, $received_document);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'receiveDocument'
     *
     * @param  int  $legal_entity_id  The id of the LegalEntity for which the document was received. (required)
     * @param  \Deegitalbe\LaravelTrustupIoStorecove\Model\ReceivedDocumentCreate  $received_document  Received document to process. (required)
     * @return \GuzzleHttp\Psr7\Request
     *
     * @throws \InvalidArgumentException
     */
    protected function receiveDocumentRequest($legal_entity_id, $received_document)
    {
        // verify the required parameter 'legal_entity_id' is set
        if ($legal_entity_id === null || (is_array($legal_entity_id) && count($legal_entity_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $legal_entity_id when calling receiveDocument'
            );
        }
        // verify the required parameter 'received_document' is set
        if ($received_document === null || (is_array($received_document) && count($received_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $received_document when calling receiveDocument'
            );
        }

        $resourcePath = '/legal_entities/{legal_entity_id}/received_documents';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if ($legal_entity_id !== null) {
            $resourcePath = str_replace(
                '{'.'legal_entity_id'.'}',
                ObjectSerializer::toPathValue($legal_entity_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($received_document)) {
            $_tempBody = $received_document;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if ($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if (is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);

        return new Request(
            'POST',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @return array of http client options
     *
     * @throws \RuntimeException on file opening failure
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (! $options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: '.$this->config->getDebugFile());
            }
        }

        return $options;
    }
}
