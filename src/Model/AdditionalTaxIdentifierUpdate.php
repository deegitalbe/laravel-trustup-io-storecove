<?php
/**
 * AdditionalTaxIdentifierUpdate
 *
 * PHP version 5
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Storecove API
 *
 * Storecove API
 *
 * OpenAPI spec version: 2.0.1
 * Contact: apisupport@storecove.nl
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.24
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Deegitalbe\LaravelTrustupIoStorecove\Model;

use ArrayAccess;
use Deegitalbe\LaravelTrustupIoStorecove\ObjectSerializer;

/**
 * AdditionalTaxIdentifierUpdate Class Doc Comment
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AdditionalTaxIdentifierUpdate implements ArrayAccess, ModelInterface
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'AdditionalTaxIdentifierUpdate';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'identifier' => 'string',
        'third_party_username' => 'string',
        'third_party_password' => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'identifier' => null,
        'third_party_username' => null,
        'third_party_password' => null,
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'identifier' => 'identifier',
        'third_party_username' => 'third_party_username',
        'third_party_password' => 'third_party_password',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'identifier' => 'setIdentifier',
        'third_party_username' => 'setThirdPartyUsername',
        'third_party_password' => 'setThirdPartyPassword',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'identifier' => 'getIdentifier',
        'third_party_username' => 'getThirdPartyUsername',
        'third_party_password' => 'getThirdPartyPassword',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param  mixed[]  $data  Associated array of property values
     *                         initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->container['identifier'] = isset($data['identifier']) ? $data['identifier'] : null;
        $this->container['third_party_username'] = isset($data['third_party_username']) ? $data['third_party_username'] : null;
        $this->container['third_party_password'] = isset($data['third_party_password']) ? $data['third_party_password'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['identifier'] === null) {
            $invalidProperties[] = "'identifier' can't be null";
        }
        if (! is_null($this->container['third_party_username']) && (mb_strlen($this->container['third_party_username']) > 64)) {
            $invalidProperties[] = "invalid value for 'third_party_username', the character length must be smaller than or equal to 64.";
        }

        if (! is_null($this->container['third_party_username']) && (mb_strlen($this->container['third_party_username']) < 2)) {
            $invalidProperties[] = "invalid value for 'third_party_username', the character length must be bigger than or equal to 2.";
        }

        if (! is_null($this->container['third_party_password']) && (mb_strlen($this->container['third_party_password']) > 64)) {
            $invalidProperties[] = "invalid value for 'third_party_password', the character length must be smaller than or equal to 64.";
        }

        if (! is_null($this->container['third_party_password']) && (mb_strlen($this->container['third_party_password']) < 2)) {
            $invalidProperties[] = "invalid value for 'third_party_password', the character length must be bigger than or equal to 2.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets identifier
     *
     * @return string
     */
    public function getIdentifier()
    {
        return $this->container['identifier'];
    }

    /**
     * Sets identifier
     *
     * @param  string  $identifier  The identifier.
     * @return $this
     */
    public function setIdentifier($identifier)
    {
        $this->container['identifier'] = $identifier;

        return $this;
    }

    /**
     * Gets third_party_username
     *
     * @return string
     */
    public function getThirdPartyUsername()
    {
        return $this->container['third_party_username'];
    }

    /**
     * Sets third_party_username
     *
     * @param  string  $third_party_username  The username to use to authenticate to a system through which to send the document, or to obtain tax authority approval to send it. This field is currently relevant only for India and mandatory when creating an IN tax identifier.
     * @return $this
     */
    public function setThirdPartyUsername($third_party_username)
    {
        if (! is_null($third_party_username) && (mb_strlen($third_party_username) > 64)) {
            throw new \InvalidArgumentException('invalid length for $third_party_username when calling AdditionalTaxIdentifierUpdate., must be smaller than or equal to 64.');
        }
        if (! is_null($third_party_username) && (mb_strlen($third_party_username) < 2)) {
            throw new \InvalidArgumentException('invalid length for $third_party_username when calling AdditionalTaxIdentifierUpdate., must be bigger than or equal to 2.');
        }

        $this->container['third_party_username'] = $third_party_username;

        return $this;
    }

    /**
     * Gets third_party_password
     *
     * @return string
     */
    public function getThirdPartyPassword()
    {
        return $this->container['third_party_password'];
    }

    /**
     * Sets third_party_password
     *
     * @param  string  $third_party_password  The password to use to authenticate to a system through which to send the document, or to obtain tax authority approval to send it. This field is currently relevant only for India and mandatory when creating an IN tax identifier.
     * @return $this
     */
    public function setThirdPartyPassword($third_party_password)
    {
        if (! is_null($third_party_password) && (mb_strlen($third_party_password) > 64)) {
            throw new \InvalidArgumentException('invalid length for $third_party_password when calling AdditionalTaxIdentifierUpdate., must be smaller than or equal to 64.');
        }
        if (! is_null($third_party_password) && (mb_strlen($third_party_password) < 2)) {
            throw new \InvalidArgumentException('invalid length for $third_party_password when calling AdditionalTaxIdentifierUpdate., must be bigger than or equal to 2.');
        }

        $this->container['third_party_password'] = $third_party_password;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  int  $offset  Offset
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param  int  $offset  Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param  int  $offset  Offset
     * @param  mixed  $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param  int  $offset  Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
