<?php
/**
 * Administration
 *
 * PHP version 5
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Storecove API
 *
 * Storecove API
 *
 * OpenAPI spec version: 2.0.1
 * Contact: apisupport@storecove.nl
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.24
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Deegitalbe\LaravelTrustupIoStorecove\Model;

use ArrayAccess;
use Deegitalbe\LaravelTrustupIoStorecove\ObjectSerializer;

/**
 * Administration Class Doc Comment
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Administration implements ArrayAccess, ModelInterface
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'Administration';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'id' => 'int',
        'sender_email_identity_id' => 'int',
        'legal_entity_id' => 'int',
        'email' => 'string',
        'packaging' => 'string',
        'package_version' => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'sender_email_identity_id' => 'int64',
        'legal_entity_id' => 'int64',
        'email' => null,
        'packaging' => null,
        'package_version' => null,
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'sender_email_identity_id' => 'sender_email_identity_id',
        'legal_entity_id' => 'legal_entity_id',
        'email' => 'email',
        'packaging' => 'packaging',
        'package_version' => 'package_version',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'sender_email_identity_id' => 'setSenderEmailIdentityId',
        'legal_entity_id' => 'setLegalEntityId',
        'email' => 'setEmail',
        'packaging' => 'setPackaging',
        'package_version' => 'setPackageVersion',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'sender_email_identity_id' => 'getSenderEmailIdentityId',
        'legal_entity_id' => 'getLegalEntityId',
        'email' => 'getEmail',
        'packaging' => 'getPackaging',
        'package_version' => 'getPackageVersion',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PACKAGING_UBL = 'ubl';

    const PACKAGE_VERSION_PEPPOL_BIS_V3 = 'peppol_bis_v3';

    const PACKAGE_VERSION_AUNZ = 'aunz';

    const PACKAGE_VERSION_SG = 'sg';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPackagingAllowableValues()
    {
        return [
            self::PACKAGING_UBL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPackageVersionAllowableValues()
    {
        return [
            self::PACKAGE_VERSION_PEPPOL_BIS_V3,
            self::PACKAGE_VERSION_AUNZ,
            self::PACKAGE_VERSION_SG,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param  mixed[]  $data  Associated array of property values
     *                         initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['sender_email_identity_id'] = isset($data['sender_email_identity_id']) ? $data['sender_email_identity_id'] : null;
        $this->container['legal_entity_id'] = isset($data['legal_entity_id']) ? $data['legal_entity_id'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['packaging'] = isset($data['packaging']) ? $data['packaging'] : null;
        $this->container['package_version'] = isset($data['package_version']) ? $data['package_version'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (! is_null($this->container['email']) && (mb_strlen($this->container['email']) > 128)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be smaller than or equal to 128.";
        }

        if (! is_null($this->container['email']) && (mb_strlen($this->container['email']) < 5)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be bigger than or equal to 5.";
        }

        $allowedValues = $this->getPackagingAllowableValues();
        if (! is_null($this->container['packaging']) && ! in_array($this->container['packaging'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'packaging', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPackageVersionAllowableValues();
        if (! is_null($this->container['package_version']) && ! in_array($this->container['package_version'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'package_version', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param  int  $id  The Storecove assigned id for the Administration.
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets sender_email_identity_id
     *
     * @return int
     */
    public function getSenderEmailIdentityId()
    {
        return $this->container['sender_email_identity_id'];
    }

    /**
     * Sets sender_email_identity_id
     *
     * @param  int  $sender_email_identity_id  The id of the SenderEmailIdentity. If not provided, the Storecove default sender will be used
     * @return $this
     */
    public function setSenderEmailIdentityId($sender_email_identity_id)
    {
        $this->container['sender_email_identity_id'] = $sender_email_identity_id;

        return $this;
    }

    /**
     * Gets legal_entity_id
     *
     * @return int
     */
    public function getLegalEntityId()
    {
        return $this->container['legal_entity_id'];
    }

    /**
     * Sets legal_entity_id
     *
     * @param  int  $legal_entity_id  The LegalEntity the Administration belongs to.
     * @return $this
     */
    public function setLegalEntityId($legal_entity_id)
    {
        $this->container['legal_entity_id'] = $legal_entity_id;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param  string  $email  The email address to send the received document to
     * @return $this
     */
    public function setEmail($email)
    {
        if (! is_null($email) && (mb_strlen($email) > 128)) {
            throw new \InvalidArgumentException('invalid length for $email when calling Administration., must be smaller than or equal to 128.');
        }
        if (! is_null($email) && (mb_strlen($email) < 5)) {
            throw new \InvalidArgumentException('invalid length for $email when calling Administration., must be bigger than or equal to 5.');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets packaging
     *
     * @return string
     */
    public function getPackaging()
    {
        return $this->container['packaging'];
    }

    /**
     * Sets packaging
     *
     * @param  string  $packaging  How to package the purchase invoice.
     * @return $this
     */
    public function setPackaging($packaging)
    {
        $allowedValues = $this->getPackagingAllowableValues();
        if (! is_null($packaging) && ! in_array($packaging, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'packaging', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['packaging'] = $packaging;

        return $this;
    }

    /**
     * Gets package_version
     *
     * @return string
     */
    public function getPackageVersion()
    {
        return $this->container['package_version'];
    }

    /**
     * Sets package_version
     *
     * @param  string  $package_version  The version of the package.
     * @return $this
     */
    public function setPackageVersion($package_version)
    {
        $allowedValues = $this->getPackageVersionAllowableValues();
        if (! is_null($package_version) && ! in_array($package_version, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'package_version', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['package_version'] = $package_version;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  int  $offset  Offset
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param  int  $offset  Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param  int  $offset  Offset
     * @param  mixed  $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param  int  $offset  Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
