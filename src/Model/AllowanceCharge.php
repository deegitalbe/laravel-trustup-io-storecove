<?php
/**
 * AllowanceCharge
 *
 * PHP version 5
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Storecove API
 *
 * Storecove API
 *
 * OpenAPI spec version: 2.0.1
 * Contact: apisupport@storecove.nl
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.24
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Deegitalbe\LaravelTrustupIoStorecove\Model;

use ArrayAccess;
use Swagger\Client\ObjectSerializer;

/**
 * AllowanceCharge Class Doc Comment
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AllowanceCharge implements ArrayAccess, ModelInterface
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'AllowanceCharge';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'amount_excluding_vat' => 'float',
        'amount_excluding_tax' => 'float',
        'base_amount_excluding_tax' => 'float',
        'amount_including_tax' => 'float',
        'base_amount_including_tax' => 'float',
        'tax' => '\Deegitalbe\LaravelTrustupIoStorecove\Model\Tax',
        'taxes_duties_fees' => '\Deegitalbe\LaravelTrustupIoStorecove\Model\Tax[]',
        'reason' => 'string',
        'reason_code' => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'amount_excluding_vat' => null,
        'amount_excluding_tax' => null,
        'base_amount_excluding_tax' => null,
        'amount_including_tax' => null,
        'base_amount_including_tax' => null,
        'tax' => null,
        'taxes_duties_fees' => null,
        'reason' => null,
        'reason_code' => null,
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'amount_excluding_vat' => 'amountExcludingVat',
        'amount_excluding_tax' => 'amountExcludingTax',
        'base_amount_excluding_tax' => 'baseAmountExcludingTax',
        'amount_including_tax' => 'amountIncludingTax',
        'base_amount_including_tax' => 'baseAmountIncludingTax',
        'tax' => 'tax',
        'taxes_duties_fees' => 'taxesDutiesFees',
        'reason' => 'reason',
        'reason_code' => 'reasonCode',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'amount_excluding_vat' => 'setAmountExcludingVat',
        'amount_excluding_tax' => 'setAmountExcludingTax',
        'base_amount_excluding_tax' => 'setBaseAmountExcludingTax',
        'amount_including_tax' => 'setAmountIncludingTax',
        'base_amount_including_tax' => 'setBaseAmountIncludingTax',
        'tax' => 'setTax',
        'taxes_duties_fees' => 'setTaxesDutiesFees',
        'reason' => 'setReason',
        'reason_code' => 'setReasonCode',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'amount_excluding_vat' => 'getAmountExcludingVat',
        'amount_excluding_tax' => 'getAmountExcludingTax',
        'base_amount_excluding_tax' => 'getBaseAmountExcludingTax',
        'amount_including_tax' => 'getAmountIncludingTax',
        'base_amount_including_tax' => 'getBaseAmountIncludingTax',
        'tax' => 'getTax',
        'taxes_duties_fees' => 'getTaxesDutiesFees',
        'reason' => 'getReason',
        'reason_code' => 'getReasonCode',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param  mixed[]  $data  Associated array of property values
     *                         initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->container['amount_excluding_vat'] = isset($data['amount_excluding_vat']) ? $data['amount_excluding_vat'] : null;
        $this->container['amount_excluding_tax'] = isset($data['amount_excluding_tax']) ? $data['amount_excluding_tax'] : null;
        $this->container['base_amount_excluding_tax'] = isset($data['base_amount_excluding_tax']) ? $data['base_amount_excluding_tax'] : null;
        $this->container['amount_including_tax'] = isset($data['amount_including_tax']) ? $data['amount_including_tax'] : null;
        $this->container['base_amount_including_tax'] = isset($data['base_amount_including_tax']) ? $data['base_amount_including_tax'] : null;
        $this->container['tax'] = isset($data['tax']) ? $data['tax'] : null;
        $this->container['taxes_duties_fees'] = isset($data['taxes_duties_fees']) ? $data['taxes_duties_fees'] : null;
        $this->container['reason'] = isset($data['reason']) ? $data['reason'] : 'Agreed settlement';
        $this->container['reason_code'] = isset($data['reason_code']) ? $data['reason_code'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets amount_excluding_vat
     *
     * @return float
     */
    public function getAmountExcludingVat()
    {
        return $this->container['amount_excluding_vat'];
    }

    /**
     * Sets amount_excluding_vat
     *
     * @param  float  $amount_excluding_vat  DEPRECATED. Use amountExcludingTax. The amount for the allowance or charge, excluding VAT.
     * @return $this
     */
    public function setAmountExcludingVat($amount_excluding_vat)
    {
        $this->container['amount_excluding_vat'] = $amount_excluding_vat;

        return $this;
    }

    /**
     * Gets amount_excluding_tax
     *
     * @return float
     */
    public function getAmountExcludingTax()
    {
        return $this->container['amount_excluding_tax'];
    }

    /**
     * Sets amount_excluding_tax
     *
     * @param  float  $amount_excluding_tax  The amount for the allowance or charge, excluding tax.
     * @return $this
     */
    public function setAmountExcludingTax($amount_excluding_tax)
    {
        $this->container['amount_excluding_tax'] = $amount_excluding_tax;

        return $this;
    }

    /**
     * Gets base_amount_excluding_tax
     *
     * @return float
     */
    public function getBaseAmountExcludingTax()
    {
        return $this->container['base_amount_excluding_tax'];
    }

    /**
     * Sets base_amount_excluding_tax
     *
     * @param  float  $base_amount_excluding_tax  The base amount for the allowance or charge, excluding tax.
     * @return $this
     */
    public function setBaseAmountExcludingTax($base_amount_excluding_tax)
    {
        $this->container['base_amount_excluding_tax'] = $base_amount_excluding_tax;

        return $this;
    }

    /**
     * Gets amount_including_tax
     *
     * @return float
     */
    public function getAmountIncludingTax()
    {
        return $this->container['amount_including_tax'];
    }

    /**
     * Sets amount_including_tax
     *
     * @param  float  $amount_including_tax  The amount for the allowance or charge, including tax.
     * @return $this
     */
    public function setAmountIncludingTax($amount_including_tax)
    {
        $this->container['amount_including_tax'] = $amount_including_tax;

        return $this;
    }

    /**
     * Gets base_amount_including_tax
     *
     * @return float
     */
    public function getBaseAmountIncludingTax()
    {
        return $this->container['base_amount_including_tax'];
    }

    /**
     * Sets base_amount_including_tax
     *
     * @param  float  $base_amount_including_tax  The base amount for the allowance or charge, including tax.
     * @return $this
     */
    public function setBaseAmountIncludingTax($base_amount_including_tax)
    {
        $this->container['base_amount_including_tax'] = $base_amount_including_tax;

        return $this;
    }

    /**
     * Gets tax
     *
     * @return \Deegitalbe\LaravelTrustupIoStorecove\Model\Tax
     */
    public function getTax()
    {
        return $this->container['tax'];
    }

    /**
     * Sets tax
     *
     * @param  \Deegitalbe\LaravelTrustupIoStorecove\Model\Tax  $tax  DEPRECATED. Use the taxesDutiesFees array. The tax for this allowance or charge.
     * @return $this
     */
    public function setTax($tax)
    {
        $this->container['tax'] = $tax;

        return $this;
    }

    /**
     * Gets taxes_duties_fees
     *
     * @return \Deegitalbe\LaravelTrustupIoStorecove\Model\Tax[]
     */
    public function getTaxesDutiesFees()
    {
        return $this->container['taxes_duties_fees'];
    }

    /**
     * Sets taxes_duties_fees
     *
     * @param  \Deegitalbe\LaravelTrustupIoStorecove\Model\Tax[]  $taxes_duties_fees  An array of taxes, duties and fees for this invoice line. At this moment, multiple Tax items is allowed only for IN (India) and US (USA) taxes. All other countries can only have a single Tax item in this array.
     * @return $this
     */
    public function setTaxesDutiesFees($taxes_duties_fees)
    {
        $this->container['taxes_duties_fees'] = $taxes_duties_fees;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return string
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param  string  $reason  The reason for the allowance or charge, free text
     * @return $this
     */
    public function setReason($reason)
    {
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets reason_code
     *
     * @return string
     */
    public function getReasonCode()
    {
        return $this->container['reason_code'];
    }

    /**
     * Sets reason_code
     *
     * @param  string  $reason_code  DEPRECATED. Do not use. Contact Storecove first if you want to use this field.
     * @return $this
     */
    public function setReasonCode($reason_code)
    {
        $this->container['reason_code'] = $reason_code;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  int  $offset  Offset
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param  int  $offset  Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param  int  $offset  Offset
     * @param  mixed  $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param  int  $offset  Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
