<?php
/**
 * Attachment
 *
 * PHP version 5
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Storecove API
 *
 * Storecove API
 *
 * OpenAPI spec version: 2.0.1
 * Contact: apisupport@storecove.nl
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.24
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Deegitalbe\LaravelTrustupIoStorecove\Model;

use ArrayAccess;
use Swagger\Client\ObjectSerializer;

/**
 * Attachment Class Doc Comment
 *
 * @category Class
 *
 * @description A document attachment to the invoice.
 *
 * @author   Swagger Codegen team
 *
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Attachment implements ArrayAccess, ModelInterface
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'Attachment';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'document' => 'string',
        'mime_type' => 'string',
        'filename' => 'string',
        'description' => 'string',
        'document_id' => 'string',
        'document_type_code' => 'string',
        'primary_image' => 'bool',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'document' => null,
        'mime_type' => null,
        'filename' => null,
        'description' => null,
        'document_id' => null,
        'document_type_code' => null,
        'primary_image' => null,
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'document' => 'document',
        'mime_type' => 'mimeType',
        'filename' => 'filename',
        'description' => 'description',
        'document_id' => 'documentId',
        'document_type_code' => 'documentTypeCode',
        'primary_image' => 'primaryImage',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'document' => 'setDocument',
        'mime_type' => 'setMimeType',
        'filename' => 'setFilename',
        'description' => 'setDescription',
        'document_id' => 'setDocumentId',
        'document_type_code' => 'setDocumentTypeCode',
        'primary_image' => 'setPrimaryImage',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'document' => 'getDocument',
        'mime_type' => 'getMimeType',
        'filename' => 'getFilename',
        'description' => 'getDescription',
        'document_id' => 'getDocumentId',
        'document_type_code' => 'getDocumentTypeCode',
        'primary_image' => 'getPrimaryImage',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const MIME_TYPE_PDF = 'application/pdf';

    const MIME_TYPE_XML = 'application/xml';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMimeTypeAllowableValues()
    {
        return [
            self::MIME_TYPE_PDF,
            self::MIME_TYPE_XML,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param  mixed[]  $data  Associated array of property values
     *                         initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->container['document'] = isset($data['document']) ? $data['document'] : null;
        $this->container['mime_type'] = isset($data['mime_type']) ? $data['mime_type'] : null;
        $this->container['filename'] = isset($data['filename']) ? $data['filename'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['document_id'] = isset($data['document_id']) ? $data['document_id'] : null;
        $this->container['document_type_code'] = isset($data['document_type_code']) ? $data['document_type_code'] : null;
        $this->container['primary_image'] = isset($data['primary_image']) ? $data['primary_image'] : false;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['document'] === null) {
            $invalidProperties[] = "'document' can't be null";
        }
        if ((mb_strlen($this->container['document']) < 5)) {
            $invalidProperties[] = "invalid value for 'document', the character length must be bigger than or equal to 5.";
        }

        if ($this->container['mime_type'] === null) {
            $invalidProperties[] = "'mime_type' can't be null";
        }
        $allowedValues = $this->getMimeTypeAllowableValues();
        if (! is_null($this->container['mime_type']) && ! in_array($this->container['mime_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'mime_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (! is_null($this->container['filename']) && ! preg_match('/^[a-zA-Z0-9]([a-zA-Z0-9._-]*[a-zA-Z0-9])?\\.[a-zA-Z0-9_-]+$/', $this->container['filename'])) {
            $invalidProperties[] = "invalid value for 'filename', must be conform to the pattern /^[a-zA-Z0-9]([a-zA-Z0-9._-]*[a-zA-Z0-9])?\\.[a-zA-Z0-9_-]+$/.";
        }

        if (! is_null($this->container['description']) && (mb_strlen($this->container['description']) > 1024)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 1024.";
        }

        if (! is_null($this->container['document_id']) && (mb_strlen($this->container['document_id']) > 64)) {
            $invalidProperties[] = "invalid value for 'document_id', the character length must be smaller than or equal to 64.";
        }

        if (! is_null($this->container['document_type_code']) && (mb_strlen($this->container['document_type_code']) > 128)) {
            $invalidProperties[] = "invalid value for 'document_type_code', the character length must be smaller than or equal to 128.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets document
     *
     * @return string
     */
    public function getDocument()
    {
        return $this->container['document'];
    }

    /**
     * Sets document
     *
     * @param  string  $document  The base64 encoded version of the document attachment.
     * @return $this
     */
    public function setDocument($document)
    {

        if ((mb_strlen($document) < 5)) {
            throw new \InvalidArgumentException('invalid length for $document when calling Attachment., must be bigger than or equal to 5.');
        }

        $this->container['document'] = $document;

        return $this;
    }

    /**
     * Gets mime_type
     *
     * @return string
     */
    public function getMimeType()
    {
        return $this->container['mime_type'];
    }

    /**
     * Sets mime_type
     *
     * @param  string  $mime_type  The document attachment mime type. The mime type 'application/xml' can only be used when routing via Peppol to DE:LWID identifier '99661-PEPPOLVERIFIKATION-25' or identifier '991-55555PEPPO-82'
     * @return $this
     */
    public function setMimeType($mime_type)
    {
        $allowedValues = $this->getMimeTypeAllowableValues();
        if (! in_array($mime_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'mime_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mime_type'] = $mime_type;

        return $this;
    }

    /**
     * Gets filename
     *
     * @return string
     */
    public function getFilename()
    {
        return $this->container['filename'];
    }

    /**
     * Sets filename
     *
     * @param  string  $filename  The name of the file attachment.
     * @return $this
     */
    public function setFilename($filename)
    {

        if (! is_null($filename) && (! preg_match('/^[a-zA-Z0-9]([a-zA-Z0-9._-]*[a-zA-Z0-9])?\\.[a-zA-Z0-9_-]+$/', $filename))) {
            throw new \InvalidArgumentException("invalid value for $filename when calling Attachment., must conform to the pattern /^[a-zA-Z0-9]([a-zA-Z0-9._-]*[a-zA-Z0-9])?\\.[a-zA-Z0-9_-]+$/.");
        }

        $this->container['filename'] = $filename;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param  string  $description  A description for the file attachment.
     * @return $this
     */
    public function setDescription($description)
    {
        if (! is_null($description) && (mb_strlen($description) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $description when calling Attachment., must be smaller than or equal to 1024.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets document_id
     *
     * @return string
     */
    public function getDocumentId()
    {
        return $this->container['document_id'];
    }

    /**
     * Sets document_id
     *
     * @param  string  $document_id  An id for the file attachment.
     * @return $this
     */
    public function setDocumentId($document_id)
    {
        if (! is_null($document_id) && (mb_strlen($document_id) > 64)) {
            throw new \InvalidArgumentException('invalid length for $document_id when calling Attachment., must be smaller than or equal to 64.');
        }

        $this->container['document_id'] = $document_id;

        return $this;
    }

    /**
     * Gets document_type_code
     *
     * @return string
     */
    public function getDocumentTypeCode()
    {
        return $this->container['document_type_code'];
    }

    /**
     * Sets document_type_code
     *
     * @param  string  $document_type_code  A document type code for the file attachment. Currently used only for SG-IRAS to support the 'sgdtotal-excl-gst' attachment.
     * @return $this
     */
    public function setDocumentTypeCode($document_type_code)
    {
        if (! is_null($document_type_code) && (mb_strlen($document_type_code) > 128)) {
            throw new \InvalidArgumentException('invalid length for $document_type_code when calling Attachment., must be smaller than or equal to 128.');
        }

        $this->container['document_type_code'] = $document_type_code;

        return $this;
    }

    /**
     * Gets primary_image
     *
     * @return bool
     */
    public function getPrimaryImage()
    {
        return $this->container['primary_image'];
    }

    /**
     * Sets primary_image
     *
     * @param  bool  $primary_image  DEPRECATED. Whether or not this document is a visual representation of the invoice data. Note that using value 'true' is discouraged, since the invoice data itself is leading, not the image, and including an image may lead to confusion. Peppol no longer allows including primary images.
     * @return $this
     */
    public function setPrimaryImage($primary_image)
    {
        $this->container['primary_image'] = $primary_image;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  int  $offset  Offset
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param  int  $offset  Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param  int  $offset  Offset
     * @param  mixed  $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param  int  $offset  Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
