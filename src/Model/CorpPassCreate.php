<?php
/**
 * CorpPassCreate
 *
 * PHP version 5
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Storecove API
 *
 * Storecove API
 *
 * OpenAPI spec version: 2.0.1
 * Contact: apisupport@storecove.nl
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.24
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Deegitalbe\LaravelTrustupIoStorecove\Model;

use ArrayAccess;
use Deegitalbe\LaravelTrustupIoStorecove\ObjectSerializer;

/**
 * CorpPassCreate Class Doc Comment
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CorpPassCreate implements ArrayAccess, ModelInterface
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'CorpPassCreate';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'enabled' => 'bool',
        'flow_type' => 'string',
        'signer_name' => 'string',
        'signer_email' => 'string',
        'client_redirect_success_url' => 'string',
        'client_redirect_fail_url' => 'string',
        'simulate_corppass' => 'bool',
        'kyc_document' => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'enabled' => null,
        'flow_type' => null,
        'signer_name' => null,
        'signer_email' => null,
        'client_redirect_success_url' => null,
        'client_redirect_fail_url' => null,
        'simulate_corppass' => null,
        'kyc_document' => null,
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'enabled' => 'enabled',
        'flow_type' => 'flow_type',
        'signer_name' => 'signer_name',
        'signer_email' => 'signer_email',
        'client_redirect_success_url' => 'client_redirect_success_url',
        'client_redirect_fail_url' => 'client_redirect_fail_url',
        'simulate_corppass' => 'simulate_corppass',
        'kyc_document' => 'kyc_document',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'enabled' => 'setEnabled',
        'flow_type' => 'setFlowType',
        'signer_name' => 'setSignerName',
        'signer_email' => 'setSignerEmail',
        'client_redirect_success_url' => 'setClientRedirectSuccessUrl',
        'client_redirect_fail_url' => 'setClientRedirectFailUrl',
        'simulate_corppass' => 'setSimulateCorppass',
        'kyc_document' => 'setKycDocument',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'enabled' => 'getEnabled',
        'flow_type' => 'getFlowType',
        'signer_name' => 'getSignerName',
        'signer_email' => 'getSignerEmail',
        'client_redirect_success_url' => 'getClientRedirectSuccessUrl',
        'client_redirect_fail_url' => 'getClientRedirectFailUrl',
        'simulate_corppass' => 'getSimulateCorppass',
        'kyc_document' => 'getKycDocument',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const FLOW_TYPE_REDIRECT = 'corppass_flow_redirect';

    const FLOW_TYPE_EMAIL = 'corppass_flow_email';

    const FLOW_TYPE_PDF = 'corppass_flow_pdf';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFlowTypeAllowableValues()
    {
        return [
            self::FLOW_TYPE_REDIRECT,
            self::FLOW_TYPE_EMAIL,
            self::FLOW_TYPE_PDF,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param  mixed[]  $data  Associated array of property values
     *                         initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : true;
        $this->container['flow_type'] = isset($data['flow_type']) ? $data['flow_type'] : null;
        $this->container['signer_name'] = isset($data['signer_name']) ? $data['signer_name'] : null;
        $this->container['signer_email'] = isset($data['signer_email']) ? $data['signer_email'] : null;
        $this->container['client_redirect_success_url'] = isset($data['client_redirect_success_url']) ? $data['client_redirect_success_url'] : null;
        $this->container['client_redirect_fail_url'] = isset($data['client_redirect_fail_url']) ? $data['client_redirect_fail_url'] : null;
        $this->container['simulate_corppass'] = isset($data['simulate_corppass']) ? $data['simulate_corppass'] : false;
        $this->container['kyc_document'] = isset($data['kyc_document']) ? $data['kyc_document'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['flow_type'] === null) {
            $invalidProperties[] = "'flow_type' can't be null";
        }
        $allowedValues = $this->getFlowTypeAllowableValues();
        if (! is_null($this->container['flow_type']) && ! in_array($this->container['flow_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'flow_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (! is_null($this->container['signer_name']) && (mb_strlen($this->container['signer_name']) > 64)) {
            $invalidProperties[] = "invalid value for 'signer_name', the character length must be smaller than or equal to 64.";
        }

        if (! is_null($this->container['signer_name']) && (mb_strlen($this->container['signer_name']) < 2)) {
            $invalidProperties[] = "invalid value for 'signer_name', the character length must be bigger than or equal to 2.";
        }

        if (! is_null($this->container['signer_email']) && (mb_strlen($this->container['signer_email']) > 128)) {
            $invalidProperties[] = "invalid value for 'signer_email', the character length must be smaller than or equal to 128.";
        }

        if (! is_null($this->container['signer_email']) && (mb_strlen($this->container['signer_email']) < 2)) {
            $invalidProperties[] = "invalid value for 'signer_email', the character length must be bigger than or equal to 2.";
        }

        if (! is_null($this->container['client_redirect_success_url']) && (mb_strlen($this->container['client_redirect_success_url']) > 255)) {
            $invalidProperties[] = "invalid value for 'client_redirect_success_url', the character length must be smaller than or equal to 255.";
        }

        if (! is_null($this->container['client_redirect_success_url']) && (mb_strlen($this->container['client_redirect_success_url']) < 11)) {
            $invalidProperties[] = "invalid value for 'client_redirect_success_url', the character length must be bigger than or equal to 11.";
        }

        if (! is_null($this->container['client_redirect_fail_url']) && (mb_strlen($this->container['client_redirect_fail_url']) > 255)) {
            $invalidProperties[] = "invalid value for 'client_redirect_fail_url', the character length must be smaller than or equal to 255.";
        }

        if (! is_null($this->container['client_redirect_fail_url']) && (mb_strlen($this->container['client_redirect_fail_url']) < 11)) {
            $invalidProperties[] = "invalid value for 'client_redirect_fail_url', the character length must be bigger than or equal to 11.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets enabled
     *
     * @return bool
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param  bool  $enabled  DEPRECATED. Whether or not to enable the CorpPass flow. Must be true if provided.
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets flow_type
     *
     * @return string
     */
    public function getFlowType()
    {
        return $this->container['flow_type'];
    }

    /**
     * Sets flow_type
     *
     * @param  string  $flow_type  The CorpPass flow type. Note that using corppass_flow_pdf requires special setup of your account by Storecove.
     * @return $this
     */
    public function setFlowType($flow_type)
    {
        $allowedValues = $this->getFlowTypeAllowableValues();
        if (! in_array($flow_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'flow_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['flow_type'] = $flow_type;

        return $this;
    }

    /**
     * Gets signer_name
     *
     * @return string
     */
    public function getSignerName()
    {
        return $this->container['signer_name'];
    }

    /**
     * Sets signer_name
     *
     * @param  string  $signer_name  The name of the person who is going to perform the CorpPass process. Mandatory for flow_type=\"corppass_flow_email\"
     * @return $this
     */
    public function setSignerName($signer_name)
    {
        if (! is_null($signer_name) && (mb_strlen($signer_name) > 64)) {
            throw new \InvalidArgumentException('invalid length for $signer_name when calling CorpPassCreate., must be smaller than or equal to 64.');
        }
        if (! is_null($signer_name) && (mb_strlen($signer_name) < 2)) {
            throw new \InvalidArgumentException('invalid length for $signer_name when calling CorpPassCreate., must be bigger than or equal to 2.');
        }

        $this->container['signer_name'] = $signer_name;

        return $this;
    }

    /**
     * Gets signer_email
     *
     * @return string
     */
    public function getSignerEmail()
    {
        return $this->container['signer_email'];
    }

    /**
     * Sets signer_email
     *
     * @param  string  $signer_email  The email of the person who is going to perform the CorpPass process. Mandatory for flow_type=\"corppass_flow_email\"
     * @return $this
     */
    public function setSignerEmail($signer_email)
    {
        if (! is_null($signer_email) && (mb_strlen($signer_email) > 128)) {
            throw new \InvalidArgumentException('invalid length for $signer_email when calling CorpPassCreate., must be smaller than or equal to 128.');
        }
        if (! is_null($signer_email) && (mb_strlen($signer_email) < 2)) {
            throw new \InvalidArgumentException('invalid length for $signer_email when calling CorpPassCreate., must be bigger than or equal to 2.');
        }

        $this->container['signer_email'] = $signer_email;

        return $this;
    }

    /**
     * Gets client_redirect_success_url
     *
     * @return string
     */
    public function getClientRedirectSuccessUrl()
    {
        return $this->container['client_redirect_success_url'];
    }

    /**
     * Sets client_redirect_success_url
     *
     * @param  string  $client_redirect_success_url  The URL the CorpPass system will redirect to in case of successful identity verfication. Mandatory for flow_type=\"corppass_flow_redirect\"
     * @return $this
     */
    public function setClientRedirectSuccessUrl($client_redirect_success_url)
    {
        if (! is_null($client_redirect_success_url) && (mb_strlen($client_redirect_success_url) > 255)) {
            throw new \InvalidArgumentException('invalid length for $client_redirect_success_url when calling CorpPassCreate., must be smaller than or equal to 255.');
        }
        if (! is_null($client_redirect_success_url) && (mb_strlen($client_redirect_success_url) < 11)) {
            throw new \InvalidArgumentException('invalid length for $client_redirect_success_url when calling CorpPassCreate., must be bigger than or equal to 11.');
        }

        $this->container['client_redirect_success_url'] = $client_redirect_success_url;

        return $this;
    }

    /**
     * Gets client_redirect_fail_url
     *
     * @return string
     */
    public function getClientRedirectFailUrl()
    {
        return $this->container['client_redirect_fail_url'];
    }

    /**
     * Sets client_redirect_fail_url
     *
     * @param  string  $client_redirect_fail_url  The URL the CorpPass system will redirect to in case of a failure to perform identity verfication. Mandatory for flow_type=\"corppass_flow_redirect\"
     * @return $this
     */
    public function setClientRedirectFailUrl($client_redirect_fail_url)
    {
        if (! is_null($client_redirect_fail_url) && (mb_strlen($client_redirect_fail_url) > 255)) {
            throw new \InvalidArgumentException('invalid length for $client_redirect_fail_url when calling CorpPassCreate., must be smaller than or equal to 255.');
        }
        if (! is_null($client_redirect_fail_url) && (mb_strlen($client_redirect_fail_url) < 11)) {
            throw new \InvalidArgumentException('invalid length for $client_redirect_fail_url when calling CorpPassCreate., must be bigger than or equal to 11.');
        }

        $this->container['client_redirect_fail_url'] = $client_redirect_fail_url;

        return $this;
    }

    /**
     * Gets simulate_corppass
     *
     * @return bool
     */
    public function getSimulateCorppass()
    {
        return $this->container['simulate_corppass'];
    }

    /**
     * Sets simulate_corppass
     *
     * @param  bool  $simulate_corppass  Whether or not to simulate CorpPass. Instead of redirecting to a CorpPass URL, you will receive a redirect to a Storecove URL which will show a page with two buttons: success and fail. This makes development without having test CorpPass credentials possible. Note this only works in sandbox, not in the production environment.
     * @return $this
     */
    public function setSimulateCorppass($simulate_corppass)
    {
        $this->container['simulate_corppass'] = $simulate_corppass;

        return $this;
    }

    /**
     * Gets kyc_document
     *
     * @return string
     */
    public function getKycDocument()
    {
        return $this->container['kyc_document'];
    }

    /**
     * Sets kyc_document
     *
     * @param  string  $kyc_document  The Base64-encoded PDF document used for KYC. Mandatory for flow_type=\"corppass_flow_pdf\"
     * @return $this
     */
    public function setKycDocument($kyc_document)
    {
        $this->container['kyc_document'] = $kyc_document;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  int  $offset  Offset
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param  int  $offset  Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param  int  $offset  Offset
     * @param  mixed  $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param  int  $offset  Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
