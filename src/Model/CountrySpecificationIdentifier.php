<?php
/**
 * CountrySpecificationIdentifier
 *
 * PHP version 5
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Storecove API
 *
 * Storecove API
 *
 * OpenAPI spec version: 2.0.1
 * Contact: apisupport@storecove.nl
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.24
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Deegitalbe\LaravelTrustupIoStorecove\Model;

use ArrayAccess;
use Swagger\Client\ObjectSerializer;

/**
 * CountrySpecificationIdentifier Class Doc Comment
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CountrySpecificationIdentifier implements ArrayAccess, ModelInterface
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'CountrySpecificationIdentifier';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'scheme_type' => 'string',
        'scheme' => 'string',
        'scheme_numercial' => 'string',
        'description' => 'string',
        'centralized' => 'bool',
        'centralized_identifier' => 'string',
        'centalized_identifier_test' => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'scheme_type' => null,
        'scheme' => null,
        'scheme_numercial' => null,
        'description' => null,
        'centralized' => null,
        'centralized_identifier' => null,
        'centalized_identifier_test' => null,
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'scheme_type' => 'scheme_type',
        'scheme' => 'scheme',
        'scheme_numercial' => 'scheme_numercial',
        'description' => 'description',
        'centralized' => 'centralized',
        'centralized_identifier' => 'centralized_identifier',
        'centalized_identifier_test' => 'centalized_identifier_test',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'scheme_type' => 'setSchemeType',
        'scheme' => 'setScheme',
        'scheme_numercial' => 'setSchemeNumercial',
        'description' => 'setDescription',
        'centralized' => 'setCentralized',
        'centralized_identifier' => 'setCentralizedIdentifier',
        'centalized_identifier_test' => 'setCentalizedIdentifierTest',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'scheme_type' => 'getSchemeType',
        'scheme' => 'getScheme',
        'scheme_numercial' => 'getSchemeNumercial',
        'description' => 'getDescription',
        'centralized' => 'getCentralized',
        'centralized_identifier' => 'getCentralizedIdentifier',
        'centalized_identifier_test' => 'getCentalizedIdentifierTest',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const SCHEME_TYPE_ISO6523_ACTORID_UPIS = 'iso6523-actorid-upis';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSchemeTypeAllowableValues()
    {
        return [
            self::SCHEME_TYPE_ISO6523_ACTORID_UPIS,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param  mixed[]  $data  Associated array of property values
     *                         initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->container['scheme_type'] = isset($data['scheme_type']) ? $data['scheme_type'] : null;
        $this->container['scheme'] = isset($data['scheme']) ? $data['scheme'] : null;
        $this->container['scheme_numercial'] = isset($data['scheme_numercial']) ? $data['scheme_numercial'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['centralized'] = isset($data['centralized']) ? $data['centralized'] : null;
        $this->container['centralized_identifier'] = isset($data['centralized_identifier']) ? $data['centralized_identifier'] : null;
        $this->container['centalized_identifier_test'] = isset($data['centalized_identifier_test']) ? $data['centalized_identifier_test'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getSchemeTypeAllowableValues();
        if (! is_null($this->container['scheme_type']) && ! in_array($this->container['scheme_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'scheme_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets scheme_type
     *
     * @return string
     */
    public function getSchemeType()
    {
        return $this->container['scheme_type'];
    }

    /**
     * Sets scheme_type
     *
     * @param  string  $scheme_type  The scheme type of the identifier. Currently always \"iso6523-actorid-upis\"
     * @return $this
     */
    public function setSchemeType($scheme_type)
    {
        $allowedValues = $this->getSchemeTypeAllowableValues();
        if (! is_null($scheme_type) && ! in_array($scheme_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'scheme_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['scheme_type'] = $scheme_type;

        return $this;
    }

    /**
     * Gets scheme
     *
     * @return string
     */
    public function getScheme()
    {
        return $this->container['scheme'];
    }

    /**
     * Sets scheme
     *
     * @param  string  $scheme  The scheme of the identifier
     * @return $this
     */
    public function setScheme($scheme)
    {
        $this->container['scheme'] = $scheme;

        return $this;
    }

    /**
     * Gets scheme_numercial
     *
     * @return string
     */
    public function getSchemeNumercial()
    {
        return $this->container['scheme_numercial'];
    }

    /**
     * Sets scheme_numercial
     *
     * @param  string  $scheme_numercial  The numerical version of the scheme of the identifier
     * @return $this
     */
    public function setSchemeNumercial($scheme_numercial)
    {
        $this->container['scheme_numercial'] = $scheme_numercial;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param  string  $description  Identifier description.
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets centralized
     *
     * @return bool
     */
    public function getCentralized()
    {
        return $this->container['centralized'];
    }

    /**
     * Sets centralized
     *
     * @param  bool  $centralized  Whether or not the identifier represents a centralized routing identifier. This is used in SG, AT and FR where all government invoices are routed to a central accesspoint with a single identifier. This field can only be present for routing identifiers.
     * @return $this
     */
    public function setCentralized($centralized)
    {
        $this->container['centralized'] = $centralized;

        return $this;
    }

    /**
     * Gets centralized_identifier
     *
     * @return string
     */
    public function getCentralizedIdentifier()
    {
        return $this->container['centralized_identifier'];
    }

    /**
     * Sets centralized_identifier
     *
     * @param  string  $centralized_identifier  The centralized identifier to use for routing, if the \"centralized\" proprerty is true.
     * @return $this
     */
    public function setCentralizedIdentifier($centralized_identifier)
    {
        $this->container['centralized_identifier'] = $centralized_identifier;

        return $this;
    }

    /**
     * Gets centalized_identifier_test
     *
     * @return string
     */
    public function getCentalizedIdentifierTest()
    {
        return $this->container['centalized_identifier_test'];
    }

    /**
     * Sets centalized_identifier_test
     *
     * @param  string  $centalized_identifier_test  The centralized identifier to use for routing in test cases, if the \"centralized\" proprerty is true. May not always be available depending on the country and network.
     * @return $this
     */
    public function setCentalizedIdentifierTest($centalized_identifier_test)
    {
        $this->container['centalized_identifier_test'] = $centalized_identifier_test;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  int  $offset  Offset
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param  int  $offset  Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param  int  $offset  Offset
     * @param  mixed  $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param  int  $offset  Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
