<?php
/**
 * Delivery
 *
 * PHP version 5
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Storecove API
 *
 * Storecove API
 *
 * OpenAPI spec version: 2.0.1
 * Contact: apisupport@storecove.nl
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.24
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Deegitalbe\LaravelTrustupIoStorecove\Model;

use ArrayAccess;
use Deegitalbe\LaravelTrustupIoStorecove\ObjectSerializer;

/**
 * Delivery Class Doc Comment
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Delivery implements ArrayAccess, ModelInterface
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'Delivery';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'delivery_location' => '\Deegitalbe\LaravelTrustupIoStorecove\Model\DeliveryDeliveryLocation',
        'requested_delivery_period' => 'string',
        'actual_delivery_date' => 'string',
        'quantity' => 'float',
        'delivery_party_name' => 'string',
        'delivery_party' => '\Deegitalbe\LaravelTrustupIoStorecove\Model\DeliveryParty',
        'shipment' => '\Deegitalbe\LaravelTrustupIoStorecove\Model\Shipment',
        'shipping_marks' => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'delivery_location' => null,
        'requested_delivery_period' => null,
        'actual_delivery_date' => null,
        'quantity' => null,
        'delivery_party_name' => null,
        'delivery_party' => null,
        'shipment' => null,
        'shipping_marks' => null,
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'delivery_location' => 'deliveryLocation',
        'requested_delivery_period' => 'requestedDeliveryPeriod',
        'actual_delivery_date' => 'actualDeliveryDate',
        'quantity' => 'quantity',
        'delivery_party_name' => 'deliveryPartyName',
        'delivery_party' => 'deliveryParty',
        'shipment' => 'shipment',
        'shipping_marks' => 'shippingMarks',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'delivery_location' => 'setDeliveryLocation',
        'requested_delivery_period' => 'setRequestedDeliveryPeriod',
        'actual_delivery_date' => 'setActualDeliveryDate',
        'quantity' => 'setQuantity',
        'delivery_party_name' => 'setDeliveryPartyName',
        'delivery_party' => 'setDeliveryParty',
        'shipment' => 'setShipment',
        'shipping_marks' => 'setShippingMarks',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'delivery_location' => 'getDeliveryLocation',
        'requested_delivery_period' => 'getRequestedDeliveryPeriod',
        'actual_delivery_date' => 'getActualDeliveryDate',
        'quantity' => 'getQuantity',
        'delivery_party_name' => 'getDeliveryPartyName',
        'delivery_party' => 'getDeliveryParty',
        'shipment' => 'getShipment',
        'shipping_marks' => 'getShippingMarks',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param  mixed[]  $data  Associated array of property values
     *                         initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->container['delivery_location'] = isset($data['delivery_location']) ? $data['delivery_location'] : null;
        $this->container['requested_delivery_period'] = isset($data['requested_delivery_period']) ? $data['requested_delivery_period'] : null;
        $this->container['actual_delivery_date'] = isset($data['actual_delivery_date']) ? $data['actual_delivery_date'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['delivery_party_name'] = isset($data['delivery_party_name']) ? $data['delivery_party_name'] : null;
        $this->container['delivery_party'] = isset($data['delivery_party']) ? $data['delivery_party'] : null;
        $this->container['shipment'] = isset($data['shipment']) ? $data['shipment'] : null;
        $this->container['shipping_marks'] = isset($data['shipping_marks']) ? $data['shipping_marks'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (! is_null($this->container['requested_delivery_period']) && ! preg_match('/^[0-9]{4}-[0-9]{2}-[0-9]{2} - [0-9]{4}-[0-9]{2}-[0-9]{2}$/', $this->container['requested_delivery_period'])) {
            $invalidProperties[] = "invalid value for 'requested_delivery_period', must be conform to the pattern /^[0-9]{4}-[0-9]{2}-[0-9]{2} - [0-9]{4}-[0-9]{2}-[0-9]{2}$/.";
        }

        if (! is_null($this->container['actual_delivery_date']) && ! preg_match('/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/', $this->container['actual_delivery_date'])) {
            $invalidProperties[] = "invalid value for 'actual_delivery_date', must be conform to the pattern /^[0-9]{4}-[0-9]{2}-[0-9]{2}$/.";
        }

        if (! is_null($this->container['shipping_marks']) && (mb_strlen($this->container['shipping_marks']) > 128)) {
            $invalidProperties[] = "invalid value for 'shipping_marks', the character length must be smaller than or equal to 128.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets delivery_location
     *
     * @return \Deegitalbe\LaravelTrustupIoStorecove\Model\DeliveryDeliveryLocation
     */
    public function getDeliveryLocation()
    {
        return $this->container['delivery_location'];
    }

    /**
     * Sets delivery_location
     *
     * @param  \Deegitalbe\LaravelTrustupIoStorecove\Model\DeliveryDeliveryLocation  $delivery_location  delivery_location
     * @return $this
     */
    public function setDeliveryLocation($delivery_location)
    {
        $this->container['delivery_location'] = $delivery_location;

        return $this;
    }

    /**
     * Gets requested_delivery_period
     *
     * @return string
     */
    public function getRequestedDeliveryPeriod()
    {
        return $this->container['requested_delivery_period'];
    }

    /**
     * Sets requested_delivery_period
     *
     * @param  string  $requested_delivery_period  The requested delivery period. Used only for DocumentOrder. Will also be used for DocumentOrder order lines, if that order line does not specify its own delivery period.
     * @return $this
     */
    public function setRequestedDeliveryPeriod($requested_delivery_period)
    {

        if (! is_null($requested_delivery_period) && (! preg_match('/^[0-9]{4}-[0-9]{2}-[0-9]{2} - [0-9]{4}-[0-9]{2}-[0-9]{2}$/', $requested_delivery_period))) {
            throw new \InvalidArgumentException("invalid value for $requested_delivery_period when calling Delivery., must conform to the pattern /^[0-9]{4}-[0-9]{2}-[0-9]{2} - [0-9]{4}-[0-9]{2}-[0-9]{2}$/.");
        }

        $this->container['requested_delivery_period'] = $requested_delivery_period;

        return $this;
    }

    /**
     * Gets actual_delivery_date
     *
     * @return string
     */
    public function getActualDeliveryDate()
    {
        return $this->container['actual_delivery_date'];
    }

    /**
     * Sets actual_delivery_date
     *
     * @param  string  $actual_delivery_date  The actual date of the delivery. Used only for Invoice
     * @return $this
     */
    public function setActualDeliveryDate($actual_delivery_date)
    {

        if (! is_null($actual_delivery_date) && (! preg_match('/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/', $actual_delivery_date))) {
            throw new \InvalidArgumentException("invalid value for $actual_delivery_date when calling Delivery., must conform to the pattern /^[0-9]{4}-[0-9]{2}-[0-9]{2}$/.");
        }

        $this->container['actual_delivery_date'] = $actual_delivery_date;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return float
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param  float  $quantity  The quantity of the delivery. Used only for Invoice
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets delivery_party_name
     *
     * @return string
     */
    public function getDeliveryPartyName()
    {
        return $this->container['delivery_party_name'];
    }

    /**
     * Sets delivery_party_name
     *
     * @param  string  $delivery_party_name  DEPRECATED. Use deliveryParty. The name of the party that took delivery. Used only for Invoice
     * @return $this
     */
    public function setDeliveryPartyName($delivery_party_name)
    {
        $this->container['delivery_party_name'] = $delivery_party_name;

        return $this;
    }

    /**
     * Gets delivery_party
     *
     * @return \Deegitalbe\LaravelTrustupIoStorecove\Model\DeliveryParty
     */
    public function getDeliveryParty()
    {
        return $this->container['delivery_party'];
    }

    /**
     * Sets delivery_party
     *
     * @param  \Deegitalbe\LaravelTrustupIoStorecove\Model\DeliveryParty  $delivery_party  The party to whom the delivery takes place.
     * @return $this
     */
    public function setDeliveryParty($delivery_party)
    {
        $this->container['delivery_party'] = $delivery_party;

        return $this;
    }

    /**
     * Gets shipment
     *
     * @return \Deegitalbe\LaravelTrustupIoStorecove\Model\Shipment
     */
    public function getShipment()
    {
        return $this->container['shipment'];
    }

    /**
     * Sets shipment
     *
     * @param  \Deegitalbe\LaravelTrustupIoStorecove\Model\Shipment  $shipment  The shipment for the delivery.
     * @return $this
     */
    public function setShipment($shipment)
    {
        $this->container['shipment'] = $shipment;

        return $this;
    }

    /**
     * Gets shipping_marks
     *
     * @return string
     */
    public function getShippingMarks()
    {
        return $this->container['shipping_marks'];
    }

    /**
     * Sets shipping_marks
     *
     * @param  string  $shipping_marks  DEPRECATED. Use the shipment object. A text that the buyer requests to be printed on the packing labels. Used only for DocumentOrder.
     * @return $this
     */
    public function setShippingMarks($shipping_marks)
    {
        if (! is_null($shipping_marks) && (mb_strlen($shipping_marks) > 128)) {
            throw new \InvalidArgumentException('invalid length for $shipping_marks when calling Delivery., must be smaller than or equal to 128.');
        }

        $this->container['shipping_marks'] = $shipping_marks;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  int  $offset  Offset
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param  int  $offset  Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param  int  $offset  Offset
     * @param  mixed  $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param  int  $offset  Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
