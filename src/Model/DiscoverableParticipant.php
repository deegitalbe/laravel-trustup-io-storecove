<?php
/**
 * DiscoverableParticipant
 *
 * PHP version 5
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Storecove API
 *
 * Storecove API
 *
 * OpenAPI spec version: 2.0.1
 * Contact: apisupport@storecove.nl
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.24
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Deegitalbe\LaravelTrustupIoStorecove\Model;

use ArrayAccess;
use Swagger\Client\ObjectSerializer;

/**
 * DiscoverableParticipant Class Doc Comment
 *
 * @category Class
 *
 * @description A participant to be discovered.
 *
 * @author   Swagger Codegen team
 *
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DiscoverableParticipant implements ArrayAccess, ModelInterface
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'DiscoverableParticipant';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'document_types' => 'string[]',
        'network' => 'string',
        'flags' => '\Deegitalbe\LaravelTrustupIoStorecove\Model\DiscoveryFlag',
        'meta_scheme' => 'string',
        'scheme' => 'string',
        'identifier' => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'document_types' => null,
        'network' => null,
        'flags' => null,
        'meta_scheme' => null,
        'scheme' => null,
        'identifier' => null,
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'document_types' => 'documentTypes',
        'network' => 'network',
        'flags' => 'flags',
        'meta_scheme' => 'metaScheme',
        'scheme' => 'scheme',
        'identifier' => 'identifier',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'document_types' => 'setDocumentTypes',
        'network' => 'setNetwork',
        'flags' => 'setFlags',
        'meta_scheme' => 'setMetaScheme',
        'scheme' => 'setScheme',
        'identifier' => 'setIdentifier',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'document_types' => 'getDocumentTypes',
        'network' => 'getNetwork',
        'flags' => 'getFlags',
        'meta_scheme' => 'getMetaScheme',
        'scheme' => 'getScheme',
        'identifier' => 'getIdentifier',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const DOCUMENT_TYPES_INVOICE = 'invoice';

    const DOCUMENT_TYPES_CREDITNOTE = 'creditnote';

    const DOCUMENT_TYPES_INVOICE_RESPONSE = 'invoice_response';

    const DOCUMENT_TYPES_ORDER = 'order';

    const DOCUMENT_TYPES_ORDERING = 'ordering';

    const DOCUMENT_TYPES_ORDER_RESPONSE = 'order_response';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDocumentTypesAllowableValues()
    {
        return [
            self::DOCUMENT_TYPES_INVOICE,
            self::DOCUMENT_TYPES_CREDITNOTE,
            self::DOCUMENT_TYPES_INVOICE_RESPONSE,
            self::DOCUMENT_TYPES_ORDER,
            self::DOCUMENT_TYPES_ORDERING,
            self::DOCUMENT_TYPES_ORDER_RESPONSE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param  mixed[]  $data  Associated array of property values
     *                         initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->container['document_types'] = isset($data['document_types']) ? $data['document_types'] : null;
        $this->container['network'] = isset($data['network']) ? $data['network'] : 'peppol';
        $this->container['flags'] = isset($data['flags']) ? $data['flags'] : null;
        $this->container['meta_scheme'] = isset($data['meta_scheme']) ? $data['meta_scheme'] : 'iso6523-actorid-upis';
        $this->container['scheme'] = isset($data['scheme']) ? $data['scheme'] : null;
        $this->container['identifier'] = isset($data['identifier']) ? $data['identifier'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (! is_null($this->container['network']) && (mb_strlen($this->container['network']) < 3)) {
            $invalidProperties[] = "invalid value for 'network', the character length must be bigger than or equal to 3.";
        }

        if (! is_null($this->container['meta_scheme']) && (mb_strlen($this->container['meta_scheme']) < 3)) {
            $invalidProperties[] = "invalid value for 'meta_scheme', the character length must be bigger than or equal to 3.";
        }

        if ($this->container['scheme'] === null) {
            $invalidProperties[] = "'scheme' can't be null";
        }
        if ((mb_strlen($this->container['scheme']) < 3)) {
            $invalidProperties[] = "invalid value for 'scheme', the character length must be bigger than or equal to 3.";
        }

        if ($this->container['identifier'] === null) {
            $invalidProperties[] = "'identifier' can't be null";
        }
        if ((mb_strlen($this->container['identifier']) < 1)) {
            $invalidProperties[] = "invalid value for 'identifier', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets document_types
     *
     * @return string[]
     */
    public function getDocumentTypes()
    {
        return $this->container['document_types'];
    }

    /**
     * Sets document_types
     *
     * @param  string[]  $document_types  An array of document types to discover. The default is '[\"invoice\", \"creditnote\"]'. This is ignored when only checking existence.
     * @return $this
     */
    public function setDocumentTypes($document_types)
    {
        $allowedValues = $this->getDocumentTypesAllowableValues();
        if (! is_null($document_types) && array_diff($document_types, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'document_types', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['document_types'] = $document_types;

        return $this;
    }

    /**
     * Gets network
     *
     * @return string
     */
    public function getNetwork()
    {
        return $this->container['network'];
    }

    /**
     * Sets network
     *
     * @param  string  $network  The network to check. Currently only 'peppol' is supported.
     * @return $this
     */
    public function setNetwork($network)
    {

        if (! is_null($network) && (mb_strlen($network) < 3)) {
            throw new \InvalidArgumentException('invalid length for $network when calling DiscoverableParticipant., must be bigger than or equal to 3.');
        }

        $this->container['network'] = $network;

        return $this;
    }

    /**
     * Gets flags
     *
     * @return \Deegitalbe\LaravelTrustupIoStorecove\Model\DiscoveryFlag
     */
    public function getFlags()
    {
        return $this->container['flags'];
    }

    /**
     * Sets flags
     *
     * @param  \Deegitalbe\LaravelTrustupIoStorecove\Model\DiscoveryFlag  $flags  The flags for the check.
     * @return $this
     */
    public function setFlags($flags)
    {
        $this->container['flags'] = $flags;

        return $this;
    }

    /**
     * Gets meta_scheme
     *
     * @return string
     */
    public function getMetaScheme()
    {
        return $this->container['meta_scheme'];
    }

    /**
     * Sets meta_scheme
     *
     * @param  string  $meta_scheme  The meta scheme of the identifier. For Peppol this is always 'iso6523-actorid-upis'.
     * @return $this
     */
    public function setMetaScheme($meta_scheme)
    {

        if (! is_null($meta_scheme) && (mb_strlen($meta_scheme) < 3)) {
            throw new \InvalidArgumentException('invalid length for $meta_scheme when calling DiscoverableParticipant., must be bigger than or equal to 3.');
        }

        $this->container['meta_scheme'] = $meta_scheme;

        return $this;
    }

    /**
     * Gets scheme
     *
     * @return string
     */
    public function getScheme()
    {
        return $this->container['scheme'];
    }

    /**
     * Sets scheme
     *
     * @param  string  $scheme  The scheme of the identifier. See <<_receiver_identifiers_list>> for a list.
     * @return $this
     */
    public function setScheme($scheme)
    {

        if ((mb_strlen($scheme) < 3)) {
            throw new \InvalidArgumentException('invalid length for $scheme when calling DiscoverableParticipant., must be bigger than or equal to 3.');
        }

        $this->container['scheme'] = $scheme;

        return $this;
    }

    /**
     * Gets identifier
     *
     * @return string
     */
    public function getIdentifier()
    {
        return $this->container['identifier'];
    }

    /**
     * Sets identifier
     *
     * @param  string  $identifier  The actual identifier.
     * @return $this
     */
    public function setIdentifier($identifier)
    {

        if ((mb_strlen($identifier) < 1)) {
            throw new \InvalidArgumentException('invalid length for $identifier when calling DiscoverableParticipant., must be bigger than or equal to 1.');
        }

        $this->container['identifier'] = $identifier;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  int  $offset  Offset
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param  int  $offset  Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param  int  $offset  Offset
     * @param  mixed  $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param  int  $offset  Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
