<?php
/**
 * DocumentInvoiceResponse
 *
 * PHP version 5
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Storecove API
 *
 * Storecove API
 *
 * OpenAPI spec version: 2.0.1
 * Contact: apisupport@storecove.nl
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.24
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Deegitalbe\LaravelTrustupIoStorecove\Model;

use ArrayAccess;
use Swagger\Client\ObjectSerializer;

/**
 * DocumentInvoiceResponse Class Doc Comment
 *
 * @category Class
 *
 * @description The invoice response to send or received.
 *
 * @author   Swagger Codegen team
 *
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DocumentInvoiceResponse implements ArrayAccess, ModelInterface
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'DocumentInvoiceResponse';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'clarifications' => '\Deegitalbe\LaravelTrustupIoStorecove\Model\InvoiceResponseClarification[]',
        'effective_date' => 'string',
        'note' => 'string',
        'response_code' => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'clarifications' => null,
        'effective_date' => null,
        'note' => null,
        'response_code' => null,
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'clarifications' => 'clarifications',
        'effective_date' => 'effectiveDate',
        'note' => 'note',
        'response_code' => 'responseCode',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'clarifications' => 'setClarifications',
        'effective_date' => 'setEffectiveDate',
        'note' => 'setNote',
        'response_code' => 'setResponseCode',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'clarifications' => 'getClarifications',
        'effective_date' => 'getEffectiveDate',
        'note' => 'getNote',
        'response_code' => 'getResponseCode',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const RESPONSE_CODE_AB = 'AB';

    const RESPONSE_CODE_IP = 'IP';

    const RESPONSE_CODE_UQ = 'UQ';

    const RESPONSE_CODE_CA = 'CA';

    const RESPONSE_CODE_RE = 'RE';

    const RESPONSE_CODE_AP = 'AP';

    const RESPONSE_CODE_PD = 'PD';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getResponseCodeAllowableValues()
    {
        return [
            self::RESPONSE_CODE_AB,
            self::RESPONSE_CODE_IP,
            self::RESPONSE_CODE_UQ,
            self::RESPONSE_CODE_CA,
            self::RESPONSE_CODE_RE,
            self::RESPONSE_CODE_AP,
            self::RESPONSE_CODE_PD,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param  mixed[]  $data  Associated array of property values
     *                         initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->container['clarifications'] = isset($data['clarifications']) ? $data['clarifications'] : null;
        $this->container['effective_date'] = isset($data['effective_date']) ? $data['effective_date'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
        $this->container['response_code'] = isset($data['response_code']) ? $data['response_code'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (! is_null($this->container['effective_date']) && ! preg_match('/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/', $this->container['effective_date'])) {
            $invalidProperties[] = "invalid value for 'effective_date', must be conform to the pattern /^[0-9]{4}-[0-9]{2}-[0-9]{2}$/.";
        }

        if ($this->container['response_code'] === null) {
            $invalidProperties[] = "'response_code' can't be null";
        }
        $allowedValues = $this->getResponseCodeAllowableValues();
        if (! is_null($this->container['response_code']) && ! in_array($this->container['response_code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'response_code', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets clarifications
     *
     * @return \Deegitalbe\LaravelTrustupIoStorecove\Model\InvoiceResponseClarification[]
     */
    public function getClarifications()
    {
        return $this->container['clarifications'];
    }

    /**
     * Sets clarifications
     *
     * @param  \Deegitalbe\LaravelTrustupIoStorecove\Model\InvoiceResponseClarification[]  $clarifications  A list of clarifications why a received invoice was rejected (RE) or under query (UQ) and what action to take.
     * @return $this
     */
    public function setClarifications($clarifications)
    {
        $this->container['clarifications'] = $clarifications;

        return $this;
    }

    /**
     * Gets effective_date
     *
     * @return string
     */
    public function getEffectiveDate()
    {
        return $this->container['effective_date'];
    }

    /**
     * Sets effective_date
     *
     * @param  string  $effective_date  The date when the status became effective. Format: yyyy-mm-dd.
     * @return $this
     */
    public function setEffectiveDate($effective_date)
    {

        if (! is_null($effective_date) && (! preg_match('/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/', $effective_date))) {
            throw new \InvalidArgumentException("invalid value for $effective_date when calling DocumentInvoiceResponse., must conform to the pattern /^[0-9]{4}-[0-9]{2}-[0-9]{2}$/.");
        }

        $this->container['effective_date'] = $effective_date;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param  string  $note  A note to add to the invoice reponse
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets response_code
     *
     * @return string
     */
    public function getResponseCode()
    {
        return $this->container['response_code'];
    }

    /**
     * Sets response_code
     *
     * @param  string  $response_code  The response code. For details see https://docs.peppol.eu/poacc/upgrade-3/codelist/UNCL4343-T111/
     * @return $this
     */
    public function setResponseCode($response_code)
    {
        $allowedValues = $this->getResponseCodeAllowableValues();
        if (! in_array($response_code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'response_code', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['response_code'] = $response_code;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  int  $offset  Offset
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param  int  $offset  Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param  int  $offset  Offset
     * @param  mixed  $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param  int  $offset  Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
