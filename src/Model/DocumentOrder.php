<?php
/**
 * DocumentOrder
 *
 * PHP version 5
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Storecove API
 *
 * Storecove API
 *
 * OpenAPI spec version: 2.0.1
 * Contact: apisupport@storecove.nl
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.24
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Deegitalbe\LaravelTrustupIoStorecove\Model;

use ArrayAccess;
use Swagger\Client\ObjectSerializer;

/**
 * DocumentOrder Class Doc Comment
 *
 * @category Class
 *
 * @description The order to send.
 *
 * @author   Swagger Codegen team
 *
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DocumentOrder implements ArrayAccess, ModelInterface
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'DocumentOrder';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'tax_system' => 'string',
        'document_number' => 'string',
        'references' => '\Deegitalbe\LaravelTrustupIoStorecove\Model\Reference[]',
        'issue_date' => 'string',
        'issue_time' => 'string',
        'time_zone' => 'string',
        'order_type' => 'string',
        'note' => 'string',
        'document_currency_code' => '\Deegitalbe\LaravelTrustupIoStorecove\Model\CurrencyCode',
        'accounting_cost' => 'string',
        'validity_period' => 'string',
        'buyer_customer_party' => '\Deegitalbe\LaravelTrustupIoStorecove\Model\BuyerCustomerPartyOrder',
        'seller_supplier_party' => '\Deegitalbe\LaravelTrustupIoStorecove\Model\SellerSupplierParty',
        'delivery' => '\Deegitalbe\LaravelTrustupIoStorecove\Model\Delivery',
        'delivery_terms' => '\Deegitalbe\LaravelTrustupIoStorecove\Model\DeliveryTerms',
        'payment_terms' => '\Deegitalbe\LaravelTrustupIoStorecove\Model\PaymentTerms',
        'allowance_charges' => '\Deegitalbe\LaravelTrustupIoStorecove\Model\AllowanceCharge[]',
        'order_lines' => '\Deegitalbe\LaravelTrustupIoStorecove\Model\OrderLine[]',
        'amount_including_tax' => 'float',
        'attachments' => '\Deegitalbe\LaravelTrustupIoStorecove\Model\Attachment[]',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'tax_system' => null,
        'document_number' => null,
        'references' => null,
        'issue_date' => null,
        'issue_time' => null,
        'time_zone' => null,
        'order_type' => null,
        'note' => null,
        'document_currency_code' => null,
        'accounting_cost' => null,
        'validity_period' => null,
        'buyer_customer_party' => null,
        'seller_supplier_party' => null,
        'delivery' => null,
        'delivery_terms' => null,
        'payment_terms' => null,
        'allowance_charges' => null,
        'order_lines' => null,
        'amount_including_tax' => null,
        'attachments' => null,
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'tax_system' => 'taxSystem',
        'document_number' => 'documentNumber',
        'references' => 'references',
        'issue_date' => 'issueDate',
        'issue_time' => 'issueTime',
        'time_zone' => 'timeZone',
        'order_type' => 'orderType',
        'note' => 'note',
        'document_currency_code' => 'documentCurrencyCode',
        'accounting_cost' => 'accountingCost',
        'validity_period' => 'validityPeriod',
        'buyer_customer_party' => 'buyerCustomerParty',
        'seller_supplier_party' => 'sellerSupplierParty',
        'delivery' => 'delivery',
        'delivery_terms' => 'deliveryTerms',
        'payment_terms' => 'paymentTerms',
        'allowance_charges' => 'allowanceCharges',
        'order_lines' => 'orderLines',
        'amount_including_tax' => 'amountIncludingTax',
        'attachments' => 'attachments',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'tax_system' => 'setTaxSystem',
        'document_number' => 'setDocumentNumber',
        'references' => 'setReferences',
        'issue_date' => 'setIssueDate',
        'issue_time' => 'setIssueTime',
        'time_zone' => 'setTimeZone',
        'order_type' => 'setOrderType',
        'note' => 'setNote',
        'document_currency_code' => 'setDocumentCurrencyCode',
        'accounting_cost' => 'setAccountingCost',
        'validity_period' => 'setValidityPeriod',
        'buyer_customer_party' => 'setBuyerCustomerParty',
        'seller_supplier_party' => 'setSellerSupplierParty',
        'delivery' => 'setDelivery',
        'delivery_terms' => 'setDeliveryTerms',
        'payment_terms' => 'setPaymentTerms',
        'allowance_charges' => 'setAllowanceCharges',
        'order_lines' => 'setOrderLines',
        'amount_including_tax' => 'setAmountIncludingTax',
        'attachments' => 'setAttachments',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'tax_system' => 'getTaxSystem',
        'document_number' => 'getDocumentNumber',
        'references' => 'getReferences',
        'issue_date' => 'getIssueDate',
        'issue_time' => 'getIssueTime',
        'time_zone' => 'getTimeZone',
        'order_type' => 'getOrderType',
        'note' => 'getNote',
        'document_currency_code' => 'getDocumentCurrencyCode',
        'accounting_cost' => 'getAccountingCost',
        'validity_period' => 'getValidityPeriod',
        'buyer_customer_party' => 'getBuyerCustomerParty',
        'seller_supplier_party' => 'getSellerSupplierParty',
        'delivery' => 'getDelivery',
        'delivery_terms' => 'getDeliveryTerms',
        'payment_terms' => 'getPaymentTerms',
        'allowance_charges' => 'getAllowanceCharges',
        'order_lines' => 'getOrderLines',
        'amount_including_tax' => 'getAmountIncludingTax',
        'attachments' => 'getAttachments',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TAX_SYSTEM_TAX_LINE_PERCENTAGES = 'tax_line_percentages';

    const ORDER_TYPE_REGULAR = 'regular';

    const ORDER_TYPE_CONSIGNMENT = 'consignment';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTaxSystemAllowableValues()
    {
        return [
            self::TAX_SYSTEM_TAX_LINE_PERCENTAGES,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOrderTypeAllowableValues()
    {
        return [
            self::ORDER_TYPE_REGULAR,
            self::ORDER_TYPE_CONSIGNMENT,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param  mixed[]  $data  Associated array of property values
     *                         initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->container['tax_system'] = isset($data['tax_system']) ? $data['tax_system'] : 'tax_line_percentages';
        $this->container['document_number'] = isset($data['document_number']) ? $data['document_number'] : null;
        $this->container['references'] = isset($data['references']) ? $data['references'] : null;
        $this->container['issue_date'] = isset($data['issue_date']) ? $data['issue_date'] : null;
        $this->container['issue_time'] = isset($data['issue_time']) ? $data['issue_time'] : null;
        $this->container['time_zone'] = isset($data['time_zone']) ? $data['time_zone'] : null;
        $this->container['order_type'] = isset($data['order_type']) ? $data['order_type'] : 'regular';
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
        $this->container['document_currency_code'] = isset($data['document_currency_code']) ? $data['document_currency_code'] : null;
        $this->container['accounting_cost'] = isset($data['accounting_cost']) ? $data['accounting_cost'] : null;
        $this->container['validity_period'] = isset($data['validity_period']) ? $data['validity_period'] : null;
        $this->container['buyer_customer_party'] = isset($data['buyer_customer_party']) ? $data['buyer_customer_party'] : null;
        $this->container['seller_supplier_party'] = isset($data['seller_supplier_party']) ? $data['seller_supplier_party'] : null;
        $this->container['delivery'] = isset($data['delivery']) ? $data['delivery'] : null;
        $this->container['delivery_terms'] = isset($data['delivery_terms']) ? $data['delivery_terms'] : null;
        $this->container['payment_terms'] = isset($data['payment_terms']) ? $data['payment_terms'] : null;
        $this->container['allowance_charges'] = isset($data['allowance_charges']) ? $data['allowance_charges'] : null;
        $this->container['order_lines'] = isset($data['order_lines']) ? $data['order_lines'] : null;
        $this->container['amount_including_tax'] = isset($data['amount_including_tax']) ? $data['amount_including_tax'] : null;
        $this->container['attachments'] = isset($data['attachments']) ? $data['attachments'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTaxSystemAllowableValues();
        if (! is_null($this->container['tax_system']) && ! in_array($this->container['tax_system'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'tax_system', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['document_number'] === null) {
            $invalidProperties[] = "'document_number' can't be null";
        }
        if ((mb_strlen($this->container['document_number']) < 1)) {
            $invalidProperties[] = "invalid value for 'document_number', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['issue_date'] === null) {
            $invalidProperties[] = "'issue_date' can't be null";
        }
        if (! preg_match('/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/', $this->container['issue_date'])) {
            $invalidProperties[] = "invalid value for 'issue_date', must be conform to the pattern /^[0-9]{4}-[0-9]{2}-[0-9]{2}$/.";
        }

        if (! is_null($this->container['issue_time']) && ! preg_match('/^[0-9]{2}:[0-9]{2}:[0-9]{2}$/', $this->container['issue_time'])) {
            $invalidProperties[] = "invalid value for 'issue_time', must be conform to the pattern /^[0-9]{2}:[0-9]{2}:[0-9]{2}$/.";
        }

        if (! is_null($this->container['time_zone']) && ! preg_match('/^[+-]\\d{4}$/', $this->container['time_zone'])) {
            $invalidProperties[] = "invalid value for 'time_zone', must be conform to the pattern /^[+-]\\d{4}$/.";
        }

        $allowedValues = $this->getOrderTypeAllowableValues();
        if (! is_null($this->container['order_type']) && ! in_array($this->container['order_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'order_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (! is_null($this->container['note']) && (mb_strlen($this->container['note']) > 255)) {
            $invalidProperties[] = "invalid value for 'note', the character length must be smaller than or equal to 255.";
        }

        if (! is_null($this->container['accounting_cost']) && (mb_strlen($this->container['accounting_cost']) < 1)) {
            $invalidProperties[] = "invalid value for 'accounting_cost', the character length must be bigger than or equal to 1.";
        }

        if (! is_null($this->container['validity_period']) && ! preg_match('/^[0-9]{4}-[0-9]{2}-[0-9]{2} - [0-9]{4}-[0-9]{2}-[0-9]{2}$/', $this->container['validity_period'])) {
            $invalidProperties[] = "invalid value for 'validity_period', must be conform to the pattern /^[0-9]{4}-[0-9]{2}-[0-9]{2} - [0-9]{4}-[0-9]{2}-[0-9]{2}$/.";
        }

        if ($this->container['seller_supplier_party'] === null) {
            $invalidProperties[] = "'seller_supplier_party' can't be null";
        }
        if ($this->container['order_lines'] === null) {
            $invalidProperties[] = "'order_lines' can't be null";
        }
        if ($this->container['amount_including_tax'] === null) {
            $invalidProperties[] = "'amount_including_tax' can't be null";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets tax_system
     *
     * @return string
     */
    public function getTaxSystem()
    {
        return $this->container['tax_system'];
    }

    /**
     * Sets tax_system
     *
     * @param  string  $tax_system  The tax system used for the invoice. The system 'tax_line_percentages' is the only one currently supported.
     * @return $this
     */
    public function setTaxSystem($tax_system)
    {
        $allowedValues = $this->getTaxSystemAllowableValues();
        if (! is_null($tax_system) && ! in_array($tax_system, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'tax_system', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tax_system'] = $tax_system;

        return $this;
    }

    /**
     * Gets document_number
     *
     * @return string
     */
    public function getDocumentNumber()
    {
        return $this->container['document_number'];
    }

    /**
     * Sets document_number
     *
     * @param  string  $document_number  The number you assigned to the document.
     * @return $this
     */
    public function setDocumentNumber($document_number)
    {

        if ((mb_strlen($document_number) < 1)) {
            throw new \InvalidArgumentException('invalid length for $document_number when calling DocumentOrder., must be bigger than or equal to 1.');
        }

        $this->container['document_number'] = $document_number;

        return $this;
    }

    /**
     * Gets references
     *
     * @return \Deegitalbe\LaravelTrustupIoStorecove\Model\Reference[]
     */
    public function getReferences()
    {
        return $this->container['references'];
    }

    /**
     * Sets references
     *
     * @param  \Deegitalbe\LaravelTrustupIoStorecove\Model\Reference[]  $references  An array of references to other documents. Note that many syntaxes do not support multiple references of the same type in which case they will be concatenated with ','. Also, not all syntaxes and doucments support all documentTypes.
     * @return $this
     */
    public function setReferences($references)
    {
        $this->container['references'] = $references;

        return $this;
    }

    /**
     * Gets issue_date
     *
     * @return string
     */
    public function getIssueDate()
    {
        return $this->container['issue_date'];
    }

    /**
     * Sets issue_date
     *
     * @param  string  $issue_date  Format: yyyy-mm-dd.
     * @return $this
     */
    public function setIssueDate($issue_date)
    {

        if ((! preg_match('/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/', $issue_date))) {
            throw new \InvalidArgumentException("invalid value for $issue_date when calling DocumentOrder., must conform to the pattern /^[0-9]{4}-[0-9]{2}-[0-9]{2}$/.");
        }

        $this->container['issue_date'] = $issue_date;

        return $this;
    }

    /**
     * Gets issue_time
     *
     * @return string
     */
    public function getIssueTime()
    {
        return $this->container['issue_time'];
    }

    /**
     * Sets issue_time
     *
     * @param  string  $issue_time  Format: hh:mm:ss
     * @return $this
     */
    public function setIssueTime($issue_time)
    {

        if (! is_null($issue_time) && (! preg_match('/^[0-9]{2}:[0-9]{2}:[0-9]{2}$/', $issue_time))) {
            throw new \InvalidArgumentException("invalid value for $issue_time when calling DocumentOrder., must conform to the pattern /^[0-9]{2}:[0-9]{2}:[0-9]{2}$/.");
        }

        $this->container['issue_time'] = $issue_time;

        return $this;
    }

    /**
     * Gets time_zone
     *
     * @return string
     */
    public function getTimeZone()
    {
        return $this->container['time_zone'];
    }

    /**
     * Sets time_zone
     *
     * @param  string  $time_zone  Format: ±zzzz, where ±zzzz is the difference from UTC, e.g. +0100 or -0900 etc. The timezone will also apply to the document issue date if this field is provided.
     * @return $this
     */
    public function setTimeZone($time_zone)
    {

        if (! is_null($time_zone) && (! preg_match('/^[+-]\\d{4}$/', $time_zone))) {
            throw new \InvalidArgumentException("invalid value for $time_zone when calling DocumentOrder., must conform to the pattern /^[+-]\\d{4}$/.");
        }

        $this->container['time_zone'] = $time_zone;

        return $this;
    }

    /**
     * Gets order_type
     *
     * @return string
     */
    public function getOrderType()
    {
        return $this->container['order_type'];
    }

    /**
     * Sets order_type
     *
     * @param  string  $order_type  The type of this order.
     * @return $this
     */
    public function setOrderType($order_type)
    {
        $allowedValues = $this->getOrderTypeAllowableValues();
        if (! is_null($order_type) && ! in_array($order_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'order_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['order_type'] = $order_type;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param  string  $note  A note to add to the document
     * @return $this
     */
    public function setNote($note)
    {
        if (! is_null($note) && (mb_strlen($note) > 255)) {
            throw new \InvalidArgumentException('invalid length for $note when calling DocumentOrder., must be smaller than or equal to 255.');
        }

        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets document_currency_code
     *
     * @return \Deegitalbe\LaravelTrustupIoStorecove\Model\CurrencyCode
     */
    public function getDocumentCurrencyCode()
    {
        return $this->container['document_currency_code'];
    }

    /**
     * Sets document_currency_code
     *
     * @param  \Deegitalbe\LaravelTrustupIoStorecove\Model\CurrencyCode  $document_currency_code  The documentCurrencyCode is the currency for the entire invoice. We currently do not support invoices in multiple currencies. If left out, will default to EUR
     * @return $this
     */
    public function setDocumentCurrencyCode($document_currency_code)
    {
        $this->container['document_currency_code'] = $document_currency_code;

        return $this;
    }

    /**
     * Gets accounting_cost
     *
     * @return string
     */
    public function getAccountingCost()
    {
        return $this->container['accounting_cost'];
    }

    /**
     * Sets accounting_cost
     *
     * @param  string  $accounting_cost  The buyer's accounting cost centre for this document.
     * @return $this
     */
    public function setAccountingCost($accounting_cost)
    {

        if (! is_null($accounting_cost) && (mb_strlen($accounting_cost) < 1)) {
            throw new \InvalidArgumentException('invalid length for $accounting_cost when calling DocumentOrder., must be bigger than or equal to 1.');
        }

        $this->container['accounting_cost'] = $accounting_cost;

        return $this;
    }

    /**
     * Gets validity_period
     *
     * @return string
     */
    public function getValidityPeriod()
    {
        return $this->container['validity_period'];
    }

    /**
     * Sets validity_period
     *
     * @param  string  $validity_period  The period (or specific date) to which the invoice applies. Format: yyyy-mm-dd - yyyy-mm-dd.
     * @return $this
     */
    public function setValidityPeriod($validity_period)
    {

        if (! is_null($validity_period) && (! preg_match('/^[0-9]{4}-[0-9]{2}-[0-9]{2} - [0-9]{4}-[0-9]{2}-[0-9]{2}$/', $validity_period))) {
            throw new \InvalidArgumentException("invalid value for $validity_period when calling DocumentOrder., must conform to the pattern /^[0-9]{4}-[0-9]{2}-[0-9]{2} - [0-9]{4}-[0-9]{2}-[0-9]{2}$/.");
        }

        $this->container['validity_period'] = $validity_period;

        return $this;
    }

    /**
     * Gets buyer_customer_party
     *
     * @return \Deegitalbe\LaravelTrustupIoStorecove\Model\BuyerCustomerPartyOrder
     */
    public function getBuyerCustomerParty()
    {
        return $this->container['buyer_customer_party'];
    }

    /**
     * Sets buyer_customer_party
     *
     * @param  \Deegitalbe\LaravelTrustupIoStorecove\Model\BuyerCustomerPartyOrder  $buyer_customer_party  The party sending the order. Most data for the BuyerCustomerParty is taken from the Storecove database, where your sender identity resides and has been validated. However, we provide a limited number of fields (mainly contact fields) here that you can specify on a document-by-document basis.
     * @return $this
     */
    public function setBuyerCustomerParty($buyer_customer_party)
    {
        $this->container['buyer_customer_party'] = $buyer_customer_party;

        return $this;
    }

    /**
     * Gets seller_supplier_party
     *
     * @return \Deegitalbe\LaravelTrustupIoStorecove\Model\SellerSupplierParty
     */
    public function getSellerSupplierParty()
    {
        return $this->container['seller_supplier_party'];
    }

    /**
     * Sets seller_supplier_party
     *
     * @param  \Deegitalbe\LaravelTrustupIoStorecove\Model\SellerSupplierParty  $seller_supplier_party  The seller supplier party. This info will be added to the LegalEntity provided through the legalEntityId.
     * @return $this
     */
    public function setSellerSupplierParty($seller_supplier_party)
    {
        $this->container['seller_supplier_party'] = $seller_supplier_party;

        return $this;
    }

    /**
     * Gets delivery
     *
     * @return \Deegitalbe\LaravelTrustupIoStorecove\Model\Delivery
     */
    public function getDelivery()
    {
        return $this->container['delivery'];
    }

    /**
     * Sets delivery
     *
     * @param  \Deegitalbe\LaravelTrustupIoStorecove\Model\Delivery  $delivery  The delivery information for the document.
     * @return $this
     */
    public function setDelivery($delivery)
    {
        $this->container['delivery'] = $delivery;

        return $this;
    }

    /**
     * Gets delivery_terms
     *
     * @return \Deegitalbe\LaravelTrustupIoStorecove\Model\DeliveryTerms
     */
    public function getDeliveryTerms()
    {
        return $this->container['delivery_terms'];
    }

    /**
     * Sets delivery_terms
     *
     * @param  \Deegitalbe\LaravelTrustupIoStorecove\Model\DeliveryTerms  $delivery_terms  The terms of delivery for the document.
     * @return $this
     */
    public function setDeliveryTerms($delivery_terms)
    {
        $this->container['delivery_terms'] = $delivery_terms;

        return $this;
    }

    /**
     * Gets payment_terms
     *
     * @return \Deegitalbe\LaravelTrustupIoStorecove\Model\PaymentTerms
     */
    public function getPaymentTerms()
    {
        return $this->container['payment_terms'];
    }

    /**
     * Sets payment_terms
     *
     * @param  \Deegitalbe\LaravelTrustupIoStorecove\Model\PaymentTerms  $payment_terms  The payment terms of the document.
     * @return $this
     */
    public function setPaymentTerms($payment_terms)
    {
        $this->container['payment_terms'] = $payment_terms;

        return $this;
    }

    /**
     * Gets allowance_charges
     *
     * @return \Deegitalbe\LaravelTrustupIoStorecove\Model\AllowanceCharge[]
     */
    public function getAllowanceCharges()
    {
        return $this->container['allowance_charges'];
    }

    /**
     * Sets allowance_charges
     *
     * @param  \Deegitalbe\LaravelTrustupIoStorecove\Model\AllowanceCharge[]  $allowance_charges  An array of allowance charges.
     * @return $this
     */
    public function setAllowanceCharges($allowance_charges)
    {
        $this->container['allowance_charges'] = $allowance_charges;

        return $this;
    }

    /**
     * Gets order_lines
     *
     * @return \Deegitalbe\LaravelTrustupIoStorecove\Model\OrderLine[]
     */
    public function getOrderLines()
    {
        return $this->container['order_lines'];
    }

    /**
     * Sets order_lines
     *
     * @param  \Deegitalbe\LaravelTrustupIoStorecove\Model\OrderLine[]  $order_lines  An array of order lines.
     * @return $this
     */
    public function setOrderLines($order_lines)
    {
        $this->container['order_lines'] = $order_lines;

        return $this;
    }

    /**
     * Gets amount_including_tax
     *
     * @return float
     */
    public function getAmountIncludingTax()
    {
        return $this->container['amount_including_tax'];
    }

    /**
     * Sets amount_including_tax
     *
     * @param  float  $amount_including_tax  Total amount including Tax.
     * @return $this
     */
    public function setAmountIncludingTax($amount_including_tax)
    {
        $this->container['amount_including_tax'] = $amount_including_tax;

        return $this;
    }

    /**
     * Gets attachments
     *
     * @return \Deegitalbe\LaravelTrustupIoStorecove\Model\Attachment[]
     */
    public function getAttachments()
    {
        return $this->container['attachments'];
    }

    /**
     * Sets attachments
     *
     * @param  \Deegitalbe\LaravelTrustupIoStorecove\Model\Attachment[]  $attachments  An array of attachments. You may provide up to 10 attchments, but the total size must not exceed 100MB after Base64 encoding.
     * @return $this
     */
    public function setAttachments($attachments)
    {
        $this->container['attachments'] = $attachments;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  int  $offset  Offset
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param  int  $offset  Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param  int  $offset  Offset
     * @param  mixed  $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param  int  $offset  Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
