<?php
/**
 * DocumentSubmission
 *
 * PHP version 5
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Storecove API
 *
 * Storecove API
 *
 * OpenAPI spec version: 2.0.1
 * Contact: apisupport@storecove.nl
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.24
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Deegitalbe\LaravelTrustupIoStorecove\Model;

use ArrayAccess;
use Deegitalbe\LaravelTrustupIoStorecove\ObjectSerializer;

/**
 * DocumentSubmission Class Doc Comment
 *
 * @category Class
 *
 * @description The document you want Storecove to send, with some meta-data.
 *
 * @author   Swagger Codegen team
 *
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DocumentSubmission implements ArrayAccess, ModelInterface
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'DocumentSubmission';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'routing' => '\Deegitalbe\LaravelTrustupIoStorecove\Model\Routing',
        'legal_entity_id' => 'int',
        'receive_guid' => 'string',
        'idempotency_guid' => 'string',
        'create_primary_image' => 'bool',
        'attachments' => '\Deegitalbe\LaravelTrustupIoStorecove\Model\Attachment[]',
        'document' => '\Deegitalbe\LaravelTrustupIoStorecove\Model\SendableDocument',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'routing' => null,
        'legal_entity_id' => null,
        'receive_guid' => null,
        'idempotency_guid' => null,
        'create_primary_image' => null,
        'attachments' => null,
        'document' => null,
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'routing' => 'routing',
        'legal_entity_id' => 'legalEntityId',
        'receive_guid' => 'receiveGuid',
        'idempotency_guid' => 'idempotencyGuid',
        'create_primary_image' => 'createPrimaryImage',
        'attachments' => 'attachments',
        'document' => 'document',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'routing' => 'setRouting',
        'legal_entity_id' => 'setLegalEntityId',
        'receive_guid' => 'setReceiveGuid',
        'idempotency_guid' => 'setIdempotencyGuid',
        'create_primary_image' => 'setCreatePrimaryImage',
        'attachments' => 'setAttachments',
        'document' => 'setDocument',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'routing' => 'getRouting',
        'legal_entity_id' => 'getLegalEntityId',
        'receive_guid' => 'getReceiveGuid',
        'idempotency_guid' => 'getIdempotencyGuid',
        'create_primary_image' => 'getCreatePrimaryImage',
        'attachments' => 'getAttachments',
        'document' => 'getDocument',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param  mixed[]  $data  Associated array of property values
     *                         initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->container['routing'] = isset($data['routing']) ? $data['routing'] : null;
        $this->container['legal_entity_id'] = isset($data['legal_entity_id']) ? $data['legal_entity_id'] : null;
        $this->container['receive_guid'] = isset($data['receive_guid']) ? $data['receive_guid'] : null;
        $this->container['idempotency_guid'] = isset($data['idempotency_guid']) ? $data['idempotency_guid'] : null;
        $this->container['create_primary_image'] = isset($data['create_primary_image']) ? $data['create_primary_image'] : null;
        $this->container['attachments'] = isset($data['attachments']) ? $data['attachments'] : null;
        $this->container['document'] = isset($data['document']) ? $data['document'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (! is_null($this->container['idempotency_guid']) && (mb_strlen($this->container['idempotency_guid']) > 36)) {
            $invalidProperties[] = "invalid value for 'idempotency_guid', the character length must be smaller than or equal to 36.";
        }

        if (! is_null($this->container['idempotency_guid']) && (mb_strlen($this->container['idempotency_guid']) < 36)) {
            $invalidProperties[] = "invalid value for 'idempotency_guid', the character length must be bigger than or equal to 36.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets routing
     *
     * @return \Deegitalbe\LaravelTrustupIoStorecove\Model\Routing
     */
    public function getRouting()
    {
        return $this->container['routing'];
    }

    /**
     * Sets routing
     *
     * @param  \Deegitalbe\LaravelTrustupIoStorecove\Model\Routing  $routing  Specifies where the document is to be sent. Can be electronic identifiers or email addresses.
     * @return $this
     */
    public function setRouting($routing)
    {
        $this->container['routing'] = $routing;

        return $this;
    }

    /**
     * Gets legal_entity_id
     *
     * @return int
     */
    public function getLegalEntityId()
    {
        return $this->container['legal_entity_id'];
    }

    /**
     * Sets legal_entity_id
     *
     * @param  int  $legal_entity_id  The id of the LegalEntity this document should be sent on behalf of. Either legalEntityId or receiveGuid is mandatory.
     * @return $this
     */
    public function setLegalEntityId($legal_entity_id)
    {
        $this->container['legal_entity_id'] = $legal_entity_id;

        return $this;
    }

    /**
     * Gets receive_guid
     *
     * @return string
     */
    public function getReceiveGuid()
    {
        return $this->container['receive_guid'];
    }

    /**
     * Sets receive_guid
     *
     * @param  string  $receive_guid  The GUID that was in the received_document webhook. Either legalEntityId or receiveGuid is mandatory. This field is used for sending response documents, such as InvoiceReponse and OrderResponse.
     * @return $this
     */
    public function setReceiveGuid($receive_guid)
    {
        $this->container['receive_guid'] = $receive_guid;

        return $this;
    }

    /**
     * Gets idempotency_guid
     *
     * @return string
     */
    public function getIdempotencyGuid()
    {
        return $this->container['idempotency_guid'];
    }

    /**
     * Sets idempotency_guid
     *
     * @param  string  $idempotency_guid  A guid that you generated for this DocumentSubmission to achieve idempotency. If you submit multiple documents with the same idempotencyGuid, only the first one will be processed and any subsequent ones will trigger an HTTP 422 Unprocessable Entity response.
     * @return $this
     */
    public function setIdempotencyGuid($idempotency_guid)
    {
        if (! is_null($idempotency_guid) && (mb_strlen($idempotency_guid) > 36)) {
            throw new \InvalidArgumentException('invalid length for $idempotency_guid when calling DocumentSubmission., must be smaller than or equal to 36.');
        }
        if (! is_null($idempotency_guid) && (mb_strlen($idempotency_guid) < 36)) {
            throw new \InvalidArgumentException('invalid length for $idempotency_guid when calling DocumentSubmission., must be bigger than or equal to 36.');
        }

        $this->container['idempotency_guid'] = $idempotency_guid;

        return $this;
    }

    /**
     * Gets create_primary_image
     *
     * @return bool
     */
    public function getCreatePrimaryImage()
    {
        return $this->container['create_primary_image'];
    }

    /**
     * Sets create_primary_image
     *
     * @param  bool  $create_primary_image  DEPRECATED. In the future we will no longer support creating PDF invoices. Whether or not to create a primary image (PDF) if one is not provided. For customers who started from April 1st 2023, the default is false. For customers who started before that, the default is true.
     * @return $this
     */
    public function setCreatePrimaryImage($create_primary_image)
    {
        $this->container['create_primary_image'] = $create_primary_image;

        return $this;
    }

    /**
     * Gets attachments
     *
     * @return \Deegitalbe\LaravelTrustupIoStorecove\Model\Attachment[]
     */
    public function getAttachments()
    {
        return $this->container['attachments'];
    }

    /**
     * Sets attachments
     *
     * @param  \Deegitalbe\LaravelTrustupIoStorecove\Model\Attachment[]  $attachments  DEPRECATED. Use the attachments array inside the 'document' property. An array of attachments. You may provide up to 10 attchments, but the total size must not exceed 100MB after Base64 encoding.
     * @return $this
     */
    public function setAttachments($attachments)
    {
        $this->container['attachments'] = $attachments;

        return $this;
    }

    /**
     * Gets document
     *
     * @return \Deegitalbe\LaravelTrustupIoStorecove\Model\SendableDocument
     */
    public function getDocument()
    {
        return $this->container['document'];
    }

    /**
     * Sets document
     *
     * @param  \Deegitalbe\LaravelTrustupIoStorecove\Model\SendableDocument  $document  document
     * @return $this
     */
    public function setDocument($document)
    {
        $this->container['document'] = $document;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  int  $offset  Offset
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param  int  $offset  Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param  int  $offset  Offset
     * @param  mixed  $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param  int  $offset  Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
