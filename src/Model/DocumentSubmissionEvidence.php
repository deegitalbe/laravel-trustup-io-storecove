<?php
/**
 * DocumentSubmissionEvidence
 *
 * PHP version 5
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Storecove API
 *
 * Storecove API
 *
 * OpenAPI spec version: 2.0.1
 * Contact: apisupport@storecove.nl
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.24
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Deegitalbe\LaravelTrustupIoStorecove\Model;

use ArrayAccess;
use Deegitalbe\LaravelTrustupIoStorecove\ObjectSerializer;

/**
 * DocumentSubmissionEvidence Class Doc Comment
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DocumentSubmissionEvidence implements ArrayAccess, ModelInterface
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'DocumentSubmissionEvidence';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'guid' => 'string',
        'sender' => 'string',
        'receiver' => 'string',
        'network' => 'string',
        'documents' => '\Deegitalbe\LaravelTrustupIoStorecove\Model\DocumentSubmissionEvidenceDocument[]',
        'evidence' => '\Deegitalbe\LaravelTrustupIoStorecove\Model\DocumentSubmissionEvidenceEvidence',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'guid' => null,
        'sender' => null,
        'receiver' => null,
        'network' => null,
        'documents' => null,
        'evidence' => null,
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'guid' => 'guid',
        'sender' => 'sender',
        'receiver' => 'receiver',
        'network' => 'network',
        'documents' => 'documents',
        'evidence' => 'evidence',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'guid' => 'setGuid',
        'sender' => 'setSender',
        'receiver' => 'setReceiver',
        'network' => 'setNetwork',
        'documents' => 'setDocuments',
        'evidence' => 'setEvidence',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'guid' => 'getGuid',
        'sender' => 'getSender',
        'receiver' => 'getReceiver',
        'network' => 'getNetwork',
        'documents' => 'getDocuments',
        'evidence' => 'getEvidence',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const NETWORK_STORECOVE = 'storecove';

    const NETWORK_AS2 = 'as2';

    const NETWORK_EMAIL = 'email';

    const NETWORK_PEPPOL = 'peppol';

    const NETWORK_DBNALLIANCE = 'dbnalliance';

    const NETWORK_SDI = 'sdi';

    const NETWORK_IN_IRP = 'in-irp';

    const NETWORK_PT_B2B = 'pt-b2b';

    const NETWORK_CH_QRBILL = 'ch-qrbill';

    const NETWORK_FINVOICE = 'finvoice';

    const NETWORK_PL_KSEF = 'pl-ksef';

    const NETWORK_SPAIN_FACE = 'spain-face';

    const NETWORK_SPAIN_FACEB2B = 'spain-faceb2b';

    const NETWORK_MY_LHDNM = 'my-lhdnm';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNetworkAllowableValues()
    {
        return [
            self::NETWORK_STORECOVE,
            self::NETWORK_AS2,
            self::NETWORK_EMAIL,
            self::NETWORK_PEPPOL,
            self::NETWORK_DBNALLIANCE,
            self::NETWORK_SDI,
            self::NETWORK_IN_IRP,
            self::NETWORK_PT_B2B,
            self::NETWORK_CH_QRBILL,
            self::NETWORK_FINVOICE,
            self::NETWORK_PL_KSEF,
            self::NETWORK_SPAIN_FACE,
            self::NETWORK_SPAIN_FACEB2B,
            self::NETWORK_MY_LHDNM,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param  mixed[]  $data  Associated array of property values
     *                         initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->container['guid'] = isset($data['guid']) ? $data['guid'] : null;
        $this->container['sender'] = isset($data['sender']) ? $data['sender'] : null;
        $this->container['receiver'] = isset($data['receiver']) ? $data['receiver'] : null;
        $this->container['network'] = isset($data['network']) ? $data['network'] : null;
        $this->container['documents'] = isset($data['documents']) ? $data['documents'] : null;
        $this->container['evidence'] = isset($data['evidence']) ? $data['evidence'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getNetworkAllowableValues();
        if (! is_null($this->container['network']) && ! in_array($this->container['network'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'network', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets guid
     *
     * @return string
     */
    public function getGuid()
    {
        return $this->container['guid'];
    }

    /**
     * Sets guid
     *
     * @param  string  $guid  The guid for the InvoiceSubmission.
     * @return $this
     */
    public function setGuid($guid)
    {
        $this->container['guid'] = $guid;

        return $this;
    }

    /**
     * Gets sender
     *
     * @return string
     */
    public function getSender()
    {
        return $this->container['sender'];
    }

    /**
     * Sets sender
     *
     * @param  string  $sender  The legal identifier of the sender, or the tax identifier if there is no legal identifier.
     * @return $this
     */
    public function setSender($sender)
    {
        $this->container['sender'] = $sender;

        return $this;
    }

    /**
     * Gets receiver
     *
     * @return string
     */
    public function getReceiver()
    {
        return $this->container['receiver'];
    }

    /**
     * Sets receiver
     *
     * @param  string  $receiver  The legal identifier of the receiver, or the tax identifier if there is no legal identifier.
     * @return $this
     */
    public function setReceiver($receiver)
    {
        $this->container['receiver'] = $receiver;

        return $this;
    }

    /**
     * Gets network
     *
     * @return string
     */
    public function getNetwork()
    {
        return $this->container['network'];
    }

    /**
     * Sets network
     *
     * @param  string  $network  The network that was used to clear or send the document
     * @return $this
     */
    public function setNetwork($network)
    {
        $allowedValues = $this->getNetworkAllowableValues();
        if (! is_null($network) && ! in_array($network, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'network', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['network'] = $network;

        return $this;
    }

    /**
     * Gets documents
     *
     * @return \Deegitalbe\LaravelTrustupIoStorecove\Model\DocumentSubmissionEvidenceDocument[]
     */
    public function getDocuments()
    {
        return $this->container['documents'];
    }

    /**
     * Sets documents
     *
     * @param  \Deegitalbe\LaravelTrustupIoStorecove\Model\DocumentSubmissionEvidenceDocument[]  $documents  An array of documents that were sent. For OpenPeppol, this is always a single document (it may contain a PDF inside). For Email, the number of documents depends on the number of attachments, which in turn depends on the country of the receiver. For email, the raw email in RFC822 format is also included.
     * @return $this
     */
    public function setDocuments($documents)
    {
        $this->container['documents'] = $documents;

        return $this;
    }

    /**
     * Gets evidence
     *
     * @return \Deegitalbe\LaravelTrustupIoStorecove\Model\DocumentSubmissionEvidenceEvidence
     */
    public function getEvidence()
    {
        return $this->container['evidence'];
    }

    /**
     * Sets evidence
     *
     * @param  \Deegitalbe\LaravelTrustupIoStorecove\Model\DocumentSubmissionEvidenceEvidence  $evidence  The evidence for this transmission.
     * @return $this
     */
    public function setEvidence($evidence)
    {
        $this->container['evidence'] = $evidence;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  int  $offset  Offset
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param  int  $offset  Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param  int  $offset  Offset
     * @param  mixed  $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param  int  $offset  Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
