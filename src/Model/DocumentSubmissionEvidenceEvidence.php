<?php
/**
 * DocumentSubmissionEvidenceEvidence
 *
 * PHP version 5
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Storecove API
 *
 * Storecove API
 *
 * OpenAPI spec version: 2.0.1
 * Contact: apisupport@storecove.nl
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.24
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Deegitalbe\LaravelTrustupIoStorecove\Model;

use ArrayAccess;
use Deegitalbe\LaravelTrustupIoStorecove\ObjectSerializer;

/**
 * DocumentSubmissionEvidenceEvidence Class Doc Comment
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DocumentSubmissionEvidenceEvidence implements ArrayAccess, ModelInterface
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'DocumentSubmissionEvidenceEvidence';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'smtp_response' => 'string',
        'timestamp' => 'string',
        'reporting_mta' => 'string',
        'remote_mta_ip' => 'string',
        'transmission_id' => 'string',
        'message_id' => 'string',
        'partner_key' => 'string',
        'long_id' => 'string',
        'acknowledgement_id' => 'string',
        'correlation_id' => 'string',
        'document_id' => 'string',
        'receiving_accesspoint' => 'string',
        'xml' => 'string',
        'signature' => 'string',
        'signature_date_time' => 'string',
        'signature_number' => 'string',
        'qr_code' => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'smtp_response' => null,
        'timestamp' => null,
        'reporting_mta' => null,
        'remote_mta_ip' => null,
        'transmission_id' => null,
        'message_id' => null,
        'partner_key' => null,
        'long_id' => null,
        'acknowledgement_id' => null,
        'correlation_id' => null,
        'document_id' => null,
        'receiving_accesspoint' => null,
        'xml' => null,
        'signature' => null,
        'signature_date_time' => null,
        'signature_number' => null,
        'qr_code' => null,
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'smtp_response' => 'smtp_response',
        'timestamp' => 'timestamp',
        'reporting_mta' => 'reporting_mta',
        'remote_mta_ip' => 'remote_mta_ip',
        'transmission_id' => 'transmission_id',
        'message_id' => 'message_id',
        'partner_key' => 'partner_key',
        'long_id' => 'long_id',
        'acknowledgement_id' => 'acknowledgement_id',
        'correlation_id' => 'correlation_id',
        'document_id' => 'document_id',
        'receiving_accesspoint' => 'receiving_accesspoint',
        'xml' => 'xml',
        'signature' => 'signature',
        'signature_date_time' => 'signature_date_time',
        'signature_number' => 'signature_number',
        'qr_code' => 'qr_code',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'smtp_response' => 'setSmtpResponse',
        'timestamp' => 'setTimestamp',
        'reporting_mta' => 'setReportingMta',
        'remote_mta_ip' => 'setRemoteMtaIp',
        'transmission_id' => 'setTransmissionId',
        'message_id' => 'setMessageId',
        'partner_key' => 'setPartnerKey',
        'long_id' => 'setLongId',
        'acknowledgement_id' => 'setAcknowledgementId',
        'correlation_id' => 'setCorrelationId',
        'document_id' => 'setDocumentId',
        'receiving_accesspoint' => 'setReceivingAccesspoint',
        'xml' => 'setXml',
        'signature' => 'setSignature',
        'signature_date_time' => 'setSignatureDateTime',
        'signature_number' => 'setSignatureNumber',
        'qr_code' => 'setQrCode',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'smtp_response' => 'getSmtpResponse',
        'timestamp' => 'getTimestamp',
        'reporting_mta' => 'getReportingMta',
        'remote_mta_ip' => 'getRemoteMtaIp',
        'transmission_id' => 'getTransmissionId',
        'message_id' => 'getMessageId',
        'partner_key' => 'getPartnerKey',
        'long_id' => 'getLongId',
        'acknowledgement_id' => 'getAcknowledgementId',
        'correlation_id' => 'getCorrelationId',
        'document_id' => 'getDocumentId',
        'receiving_accesspoint' => 'getReceivingAccesspoint',
        'xml' => 'getXml',
        'signature' => 'getSignature',
        'signature_date_time' => 'getSignatureDateTime',
        'signature_number' => 'getSignatureNumber',
        'qr_code' => 'getQrCode',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param  mixed[]  $data  Associated array of property values
     *                         initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->container['smtp_response'] = isset($data['smtp_response']) ? $data['smtp_response'] : null;
        $this->container['timestamp'] = isset($data['timestamp']) ? $data['timestamp'] : null;
        $this->container['reporting_mta'] = isset($data['reporting_mta']) ? $data['reporting_mta'] : null;
        $this->container['remote_mta_ip'] = isset($data['remote_mta_ip']) ? $data['remote_mta_ip'] : null;
        $this->container['transmission_id'] = isset($data['transmission_id']) ? $data['transmission_id'] : null;
        $this->container['message_id'] = isset($data['message_id']) ? $data['message_id'] : null;
        $this->container['partner_key'] = isset($data['partner_key']) ? $data['partner_key'] : null;
        $this->container['long_id'] = isset($data['long_id']) ? $data['long_id'] : null;
        $this->container['acknowledgement_id'] = isset($data['acknowledgement_id']) ? $data['acknowledgement_id'] : null;
        $this->container['correlation_id'] = isset($data['correlation_id']) ? $data['correlation_id'] : null;
        $this->container['document_id'] = isset($data['document_id']) ? $data['document_id'] : null;
        $this->container['receiving_accesspoint'] = isset($data['receiving_accesspoint']) ? $data['receiving_accesspoint'] : null;
        $this->container['xml'] = isset($data['xml']) ? $data['xml'] : null;
        $this->container['signature'] = isset($data['signature']) ? $data['signature'] : null;
        $this->container['signature_date_time'] = isset($data['signature_date_time']) ? $data['signature_date_time'] : null;
        $this->container['signature_number'] = isset($data['signature_number']) ? $data['signature_number'] : null;
        $this->container['qr_code'] = isset($data['qr_code']) ? $data['qr_code'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets smtp_response
     *
     * @return string
     */
    public function getSmtpResponse()
    {
        return $this->container['smtp_response'];
    }

    /**
     * Sets smtp_response
     *
     * @param  string  $smtp_response  The response of the receiving SMTP server. Only used for network \"email\".
     * @return $this
     */
    public function setSmtpResponse($smtp_response)
    {
        $this->container['smtp_response'] = $smtp_response;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return string
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param  string  $timestamp  The timestamp of the delivery to the receiving SMTP server. Only used for network \"email\".
     * @return $this
     */
    public function setTimestamp($timestamp)
    {
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets reporting_mta
     *
     * @return string
     */
    public function getReportingMta()
    {
        return $this->container['reporting_mta'];
    }

    /**
     * Sets reporting_mta
     *
     * @param  string  $reporting_mta  An identification for the sending SMTP. Only used for network \"email\".
     * @return $this
     */
    public function setReportingMta($reporting_mta)
    {
        $this->container['reporting_mta'] = $reporting_mta;

        return $this;
    }

    /**
     * Gets remote_mta_ip
     *
     * @return string
     */
    public function getRemoteMtaIp()
    {
        return $this->container['remote_mta_ip'];
    }

    /**
     * Sets remote_mta_ip
     *
     * @param  string  $remote_mta_ip  The IP address of the sending SMTP server. Only used for network \"email\".
     * @return $this
     */
    public function setRemoteMtaIp($remote_mta_ip)
    {
        $this->container['remote_mta_ip'] = $remote_mta_ip;

        return $this;
    }

    /**
     * Gets transmission_id
     *
     * @return string
     */
    public function getTransmissionId()
    {
        return $this->container['transmission_id'];
    }

    /**
     * Sets transmission_id
     *
     * @param  string  $transmission_id  The unique id for this transmission. The meaning of this field varies, depending on the network.
     * @return $this
     */
    public function setTransmissionId($transmission_id)
    {
        $this->container['transmission_id'] = $transmission_id;

        return $this;
    }

    /**
     * Gets message_id
     *
     * @return string
     */
    public function getMessageId()
    {
        return $this->container['message_id'];
    }

    /**
     * Sets message_id
     *
     * @param  string  $message_id  The meaning of this field varies, depending on the network. For peppol and dbnaliance, this is the message id of the envelope. For sdi, this is the filename assigned to the document.
     * @return $this
     */
    public function setMessageId($message_id)
    {
        $this->container['message_id'] = $message_id;

        return $this;
    }

    /**
     * Gets partner_key
     *
     * @return string
     */
    public function getPartnerKey()
    {
        return $this->container['partner_key'];
    }

    /**
     * Sets partner_key
     *
     * @param  string  $partner_key  The meaning of this field varies, depending on the network. For my-lhdnm, it is the UUID.
     * @return $this
     */
    public function setPartnerKey($partner_key)
    {
        $this->container['partner_key'] = $partner_key;

        return $this;
    }

    /**
     * Gets long_id
     *
     * @return string
     */
    public function getLongId()
    {
        return $this->container['long_id'];
    }

    /**
     * Sets long_id
     *
     * @param  string  $long_id  Only used for application my-lhdnm.
     * @return $this
     */
    public function setLongId($long_id)
    {
        $this->container['long_id'] = $long_id;

        return $this;
    }

    /**
     * Gets acknowledgement_id
     *
     * @return string
     */
    public function getAcknowledgementId()
    {
        return $this->container['acknowledgement_id'];
    }

    /**
     * Sets acknowledgement_id
     *
     * @param  string  $acknowledgement_id  Only used for application sg-iras.
     * @return $this
     */
    public function setAcknowledgementId($acknowledgement_id)
    {
        $this->container['acknowledgement_id'] = $acknowledgement_id;

        return $this;
    }

    /**
     * Gets correlation_id
     *
     * @return string
     */
    public function getCorrelationId()
    {
        return $this->container['correlation_id'];
    }

    /**
     * Sets correlation_id
     *
     * @param  string  $correlation_id  Only used for application sg-iras.
     * @return $this
     */
    public function setCorrelationId($correlation_id)
    {
        $this->container['correlation_id'] = $correlation_id;

        return $this;
    }

    /**
     * Gets document_id
     *
     * @return string
     */
    public function getDocumentId()
    {
        return $this->container['document_id'];
    }

    /**
     * Sets document_id
     *
     * @param  string  $document_id  The UUID in the generated XML document. Only used for application my-lhdnm and sg-iras.
     * @return $this
     */
    public function setDocumentId($document_id)
    {
        $this->container['document_id'] = $document_id;

        return $this;
    }

    /**
     * Gets receiving_accesspoint
     *
     * @return string
     */
    public function getReceivingAccesspoint()
    {
        return $this->container['receiving_accesspoint'];
    }

    /**
     * Sets receiving_accesspoint
     *
     * @param  string  $receiving_accesspoint  An identification of the OpenPeppol accesspoint that the invoice was sent to. Only used for exchange networks like peppol and dbnalliance.
     * @return $this
     */
    public function setReceivingAccesspoint($receiving_accesspoint)
    {
        $this->container['receiving_accesspoint'] = $receiving_accesspoint;

        return $this;
    }

    /**
     * Gets xml
     *
     * @return string
     */
    public function getXml()
    {
        return $this->container['xml'];
    }

    /**
     * Sets xml
     *
     * @param  string  $xml  The XML evidence for the transmission. This is the XML returned by the receiving accesspoint, either OpenPeppol or DBNAlliance.
     * @return $this
     */
    public function setXml($xml)
    {
        $this->container['xml'] = $xml;

        return $this;
    }

    /**
     * Gets signature
     *
     * @return string
     */
    public function getSignature()
    {
        return $this->container['signature'];
    }

    /**
     * Sets signature
     *
     * @param  string  $signature  The signature assiged by the tax authority or its authorized partner. Used for network india.
     * @return $this
     */
    public function setSignature($signature)
    {
        $this->container['signature'] = $signature;

        return $this;
    }

    /**
     * Gets signature_date_time
     *
     * @return string
     */
    public function getSignatureDateTime()
    {
        return $this->container['signature_date_time'];
    }

    /**
     * Sets signature_date_time
     *
     * @param  string  $signature_date_time  The datetime of the signature assiged by the tax authority or its authorized partner. Used for network india.
     * @return $this
     */
    public function setSignatureDateTime($signature_date_time)
    {
        $this->container['signature_date_time'] = $signature_date_time;

        return $this;
    }

    /**
     * Gets signature_number
     *
     * @return string
     */
    public function getSignatureNumber()
    {
        return $this->container['signature_number'];
    }

    /**
     * Sets signature_number
     *
     * @param  string  $signature_number  The sequence number of the signature assiged by the tax authority or its authorized partner. Used for network india.
     * @return $this
     */
    public function setSignatureNumber($signature_number)
    {
        $this->container['signature_number'] = $signature_number;

        return $this;
    }

    /**
     * Gets qr_code
     *
     * @return string
     */
    public function getQrCode()
    {
        return $this->container['qr_code'];
    }

    /**
     * Sets qr_code
     *
     * @param  string  $qr_code  The QR Code assiged by the tax authority or its authorized partner. Used for networks india and pt-b2b.
     * @return $this
     */
    public function setQrCode($qr_code)
    {
        $this->container['qr_code'] = $qr_code;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  int  $offset  Offset
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param  int  $offset  Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param  int  $offset  Offset
     * @param  mixed  $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param  int  $offset  Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
