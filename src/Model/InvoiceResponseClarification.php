<?php
/**
 * InvoiceResponseClarification
 *
 * PHP version 5
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Storecove API
 *
 * Storecove API
 *
 * OpenAPI spec version: 2.0.1
 * Contact: apisupport@storecove.nl
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.24
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Deegitalbe\LaravelTrustupIoStorecove\Model;

use ArrayAccess;
use Swagger\Client\ObjectSerializer;

/**
 * InvoiceResponseClarification Class Doc Comment
 *
 * @category Class
 *
 * @description A clarification for why a received invoice was rejected (RE) or under query (UQ) and what action to take.
 *
 * @author   Swagger Codegen team
 *
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InvoiceResponseClarification implements ArrayAccess, ModelInterface
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'InvoiceResponseClarification';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'clarification_code_type' => 'string',
        'clarification_code' => 'string',
        'clarification' => 'string',
        'conditions' => '\Deegitalbe\LaravelTrustupIoStorecove\Model\InvoiceResponseCondition[]',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'clarification_code_type' => null,
        'clarification_code' => null,
        'clarification' => null,
        'conditions' => null,
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'clarification_code_type' => 'clarificationCodeType',
        'clarification_code' => 'clarificationCode',
        'clarification' => 'clarification',
        'conditions' => 'conditions',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'clarification_code_type' => 'setClarificationCodeType',
        'clarification_code' => 'setClarificationCode',
        'clarification' => 'setClarification',
        'conditions' => 'setConditions',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'clarification_code_type' => 'getClarificationCodeType',
        'clarification_code' => 'getClarificationCode',
        'clarification' => 'getClarification',
        'conditions' => 'getConditions',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CLARIFICATION_CODE_TYPE_OP_STATUS_REASON = 'OPStatusReason';

    const CLARIFICATION_CODE_TYPE_OP_STATUS_ACTION = 'OPStatusAction';

    const CLARIFICATION_CODE_NON = 'NON';

    const CLARIFICATION_CODE_REF = 'REF';

    const CLARIFICATION_CODE_LEG = 'LEG';

    const CLARIFICATION_CODE_REC = 'REC';

    const CLARIFICATION_CODE_QUA = 'QUA';

    const CLARIFICATION_CODE_DEL = 'DEL';

    const CLARIFICATION_CODE_PRI = 'PRI';

    const CLARIFICATION_CODE_QTY = 'QTY';

    const CLARIFICATION_CODE_ITM = 'ITM';

    const CLARIFICATION_CODE_PAY = 'PAY';

    const CLARIFICATION_CODE_UNR = 'UNR';

    const CLARIFICATION_CODE_FIN = 'FIN';

    const CLARIFICATION_CODE_PPD = 'PPD';

    const CLARIFICATION_CODE_OTH = 'OTH';

    const CLARIFICATION_CODE_NOA = 'NOA';

    const CLARIFICATION_CODE_PIN = 'PIN';

    const CLARIFICATION_CODE_NIN = 'NIN';

    const CLARIFICATION_CODE_CNF = 'CNF';

    const CLARIFICATION_CODE_CNP = 'CNP';

    const CLARIFICATION_CODE_CNA = 'CNA';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getClarificationCodeTypeAllowableValues()
    {
        return [
            self::CLARIFICATION_CODE_TYPE_OP_STATUS_REASON,
            self::CLARIFICATION_CODE_TYPE_OP_STATUS_ACTION,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getClarificationCodeAllowableValues()
    {
        return [
            self::CLARIFICATION_CODE_NON,
            self::CLARIFICATION_CODE_REF,
            self::CLARIFICATION_CODE_LEG,
            self::CLARIFICATION_CODE_REC,
            self::CLARIFICATION_CODE_QUA,
            self::CLARIFICATION_CODE_DEL,
            self::CLARIFICATION_CODE_PRI,
            self::CLARIFICATION_CODE_QTY,
            self::CLARIFICATION_CODE_ITM,
            self::CLARIFICATION_CODE_PAY,
            self::CLARIFICATION_CODE_UNR,
            self::CLARIFICATION_CODE_FIN,
            self::CLARIFICATION_CODE_PPD,
            self::CLARIFICATION_CODE_OTH,
            self::CLARIFICATION_CODE_NOA,
            self::CLARIFICATION_CODE_PIN,
            self::CLARIFICATION_CODE_NIN,
            self::CLARIFICATION_CODE_CNF,
            self::CLARIFICATION_CODE_CNP,
            self::CLARIFICATION_CODE_CNA,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param  mixed[]  $data  Associated array of property values
     *                         initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->container['clarification_code_type'] = isset($data['clarification_code_type']) ? $data['clarification_code_type'] : null;
        $this->container['clarification_code'] = isset($data['clarification_code']) ? $data['clarification_code'] : null;
        $this->container['clarification'] = isset($data['clarification']) ? $data['clarification'] : null;
        $this->container['conditions'] = isset($data['conditions']) ? $data['conditions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getClarificationCodeTypeAllowableValues();
        if (! is_null($this->container['clarification_code_type']) && ! in_array($this->container['clarification_code_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'clarification_code_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getClarificationCodeAllowableValues();
        if (! is_null($this->container['clarification_code']) && ! in_array($this->container['clarification_code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'clarification_code', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets clarification_code_type
     *
     * @return string
     */
    public function getClarificationCodeType()
    {
        return $this->container['clarification_code_type'];
    }

    /**
     * Sets clarification_code_type
     *
     * @param  string  $clarification_code_type  The type of the clarification.
     * @return $this
     */
    public function setClarificationCodeType($clarification_code_type)
    {
        $allowedValues = $this->getClarificationCodeTypeAllowableValues();
        if (! is_null($clarification_code_type) && ! in_array($clarification_code_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'clarification_code_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['clarification_code_type'] = $clarification_code_type;

        return $this;
    }

    /**
     * Gets clarification_code
     *
     * @return string
     */
    public function getClarificationCode()
    {
        return $this->container['clarification_code'];
    }

    /**
     * Sets clarification_code
     *
     * @param  string  $clarification_code  The code for the clarification. For details see https://docs.peppol.eu/poacc/upgrade-3/codelist/OPStatusReason/ and https://docs.peppol.eu/poacc/upgrade-3/codelist/OPStatusAction/
     * @return $this
     */
    public function setClarificationCode($clarification_code)
    {
        $allowedValues = $this->getClarificationCodeAllowableValues();
        if (! is_null($clarification_code) && ! in_array($clarification_code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'clarification_code', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['clarification_code'] = $clarification_code;

        return $this;
    }

    /**
     * Gets clarification
     *
     * @return string
     */
    public function getClarification()
    {
        return $this->container['clarification'];
    }

    /**
     * Sets clarification
     *
     * @param  string  $clarification  A textual description of the clarification
     * @return $this
     */
    public function setClarification($clarification)
    {
        $this->container['clarification'] = $clarification;

        return $this;
    }

    /**
     * Gets conditions
     *
     * @return \Deegitalbe\LaravelTrustupIoStorecove\Model\InvoiceResponseCondition[]
     */
    public function getConditions()
    {
        return $this->container['conditions'];
    }

    /**
     * Sets conditions
     *
     * @param  \Deegitalbe\LaravelTrustupIoStorecove\Model\InvoiceResponseCondition[]  $conditions  A list of conditions that triggered the error. This is only included for receiving in webhooks. You cannot currently send these conditions.
     * @return $this
     */
    public function setConditions($conditions)
    {
        $this->container['conditions'] = $conditions;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  int  $offset  Offset
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param  int  $offset  Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param  int  $offset  Offset
     * @param  mixed  $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param  int  $offset  Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
