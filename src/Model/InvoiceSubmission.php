<?php
/**
 * InvoiceSubmission
 *
 * PHP version 5
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Storecove API
 *
 * Storecove API
 *
 * OpenAPI spec version: 2.0.1
 * Contact: apisupport@storecove.nl
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.24
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Deegitalbe\LaravelTrustupIoStorecove\Model;

use ArrayAccess;
use Swagger\Client\ObjectSerializer;

/**
 * InvoiceSubmission Class Doc Comment
 *
 * @category Class
 *
 * @description DEPRECATED. The invoice you want Storecove to process, with some meta-data.
 *
 * @author   Swagger Codegen team
 *
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InvoiceSubmission implements ArrayAccess, ModelInterface
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'InvoiceSubmission';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'create_primary_image' => 'bool',
        'mode' => 'string',
        'supplier_id' => 'int',
        'legal_supplier_id' => 'int',
        'legal_entity_id' => 'int',
        'idempotency_guid' => 'string',
        'invoice_recipient' => '\Deegitalbe\LaravelTrustupIoStorecove\Model\InvoiceRecipient',
        'routing' => '\Deegitalbe\LaravelTrustupIoStorecove\Model\Routing',
        'attachments' => '\Deegitalbe\LaravelTrustupIoStorecove\Model\Attachment[]',
        'document' => 'string',
        'document_url' => 'string',
        'invoice' => '\Deegitalbe\LaravelTrustupIoStorecove\Model\Invoice',
        'invoice_data' => '\Deegitalbe\LaravelTrustupIoStorecove\Model\InvoiceData',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'create_primary_image' => null,
        'mode' => null,
        'supplier_id' => null,
        'legal_supplier_id' => null,
        'legal_entity_id' => null,
        'idempotency_guid' => null,
        'invoice_recipient' => null,
        'routing' => null,
        'attachments' => null,
        'document' => null,
        'document_url' => 'uri',
        'invoice' => null,
        'invoice_data' => null,
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'create_primary_image' => 'createPrimaryImage',
        'mode' => 'mode',
        'supplier_id' => 'supplierId',
        'legal_supplier_id' => 'legalSupplierId',
        'legal_entity_id' => 'legalEntityId',
        'idempotency_guid' => 'idempotencyGuid',
        'invoice_recipient' => 'invoiceRecipient',
        'routing' => 'routing',
        'attachments' => 'attachments',
        'document' => 'document',
        'document_url' => 'documentUrl',
        'invoice' => 'invoice',
        'invoice_data' => 'invoiceData',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'create_primary_image' => 'setCreatePrimaryImage',
        'mode' => 'setMode',
        'supplier_id' => 'setSupplierId',
        'legal_supplier_id' => 'setLegalSupplierId',
        'legal_entity_id' => 'setLegalEntityId',
        'idempotency_guid' => 'setIdempotencyGuid',
        'invoice_recipient' => 'setInvoiceRecipient',
        'routing' => 'setRouting',
        'attachments' => 'setAttachments',
        'document' => 'setDocument',
        'document_url' => 'setDocumentUrl',
        'invoice' => 'setInvoice',
        'invoice_data' => 'setInvoiceData',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'create_primary_image' => 'getCreatePrimaryImage',
        'mode' => 'getMode',
        'supplier_id' => 'getSupplierId',
        'legal_supplier_id' => 'getLegalSupplierId',
        'legal_entity_id' => 'getLegalEntityId',
        'idempotency_guid' => 'getIdempotencyGuid',
        'invoice_recipient' => 'getInvoiceRecipient',
        'routing' => 'getRouting',
        'attachments' => 'getAttachments',
        'document' => 'getDocument',
        'document_url' => 'getDocumentUrl',
        'invoice' => 'getInvoice',
        'invoice_data' => 'getInvoiceData',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const MODE_DIRECT = 'direct';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getModeAllowableValues()
    {
        return [
            self::MODE_DIRECT,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param  mixed[]  $data  Associated array of property values
     *                         initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->container['create_primary_image'] = isset($data['create_primary_image']) ? $data['create_primary_image'] : null;
        $this->container['mode'] = isset($data['mode']) ? $data['mode'] : null;
        $this->container['supplier_id'] = isset($data['supplier_id']) ? $data['supplier_id'] : null;
        $this->container['legal_supplier_id'] = isset($data['legal_supplier_id']) ? $data['legal_supplier_id'] : null;
        $this->container['legal_entity_id'] = isset($data['legal_entity_id']) ? $data['legal_entity_id'] : null;
        $this->container['idempotency_guid'] = isset($data['idempotency_guid']) ? $data['idempotency_guid'] : null;
        $this->container['invoice_recipient'] = isset($data['invoice_recipient']) ? $data['invoice_recipient'] : null;
        $this->container['routing'] = isset($data['routing']) ? $data['routing'] : null;
        $this->container['attachments'] = isset($data['attachments']) ? $data['attachments'] : null;
        $this->container['document'] = isset($data['document']) ? $data['document'] : null;
        $this->container['document_url'] = isset($data['document_url']) ? $data['document_url'] : null;
        $this->container['invoice'] = isset($data['invoice']) ? $data['invoice'] : null;
        $this->container['invoice_data'] = isset($data['invoice_data']) ? $data['invoice_data'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getModeAllowableValues();
        if (! is_null($this->container['mode']) && ! in_array($this->container['mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'mode', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (! is_null($this->container['idempotency_guid']) && (mb_strlen($this->container['idempotency_guid']) > 36)) {
            $invalidProperties[] = "invalid value for 'idempotency_guid', the character length must be smaller than or equal to 36.";
        }

        if (! is_null($this->container['idempotency_guid']) && (mb_strlen($this->container['idempotency_guid']) < 36)) {
            $invalidProperties[] = "invalid value for 'idempotency_guid', the character length must be bigger than or equal to 36.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets create_primary_image
     *
     * @return bool
     */
    public function getCreatePrimaryImage()
    {
        return $this->container['create_primary_image'];
    }

    /**
     * Sets create_primary_image
     *
     * @param  bool  $create_primary_image  DEPRECATED. In the future we will no longer support creating PDF invoices. Whether or not to create a primary image (PDF) if one is not provided. For customers who started from December 1st 2022, the default is false. For customers who started before that, the default is true.
     * @return $this
     */
    public function setCreatePrimaryImage($create_primary_image)
    {
        $this->container['create_primary_image'] = $create_primary_image;

        return $this;
    }

    /**
     * Gets mode
     *
     * @return string
     */
    public function getMode()
    {
        return $this->container['mode'];
    }

    /**
     * Sets mode
     *
     * @param  string  $mode  DEPRECATED.
     * @return $this
     */
    public function setMode($mode)
    {
        $allowedValues = $this->getModeAllowableValues();
        if (! is_null($mode) && ! in_array($mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'mode', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mode'] = $mode;

        return $this;
    }

    /**
     * Gets supplier_id
     *
     * @return int
     */
    public function getSupplierId()
    {
        return $this->container['supplier_id'];
    }

    /**
     * Sets supplier_id
     *
     * @param  int  $supplier_id  DEPRECATED.
     * @return $this
     */
    public function setSupplierId($supplier_id)
    {
        $this->container['supplier_id'] = $supplier_id;

        return $this;
    }

    /**
     * Gets legal_supplier_id
     *
     * @return int
     */
    public function getLegalSupplierId()
    {
        return $this->container['legal_supplier_id'];
    }

    /**
     * Sets legal_supplier_id
     *
     * @param  int  $legal_supplier_id  DEPRECATED. Use legalEntityId
     * @return $this
     */
    public function setLegalSupplierId($legal_supplier_id)
    {
        $this->container['legal_supplier_id'] = $legal_supplier_id;

        return $this;
    }

    /**
     * Gets legal_entity_id
     *
     * @return int
     */
    public function getLegalEntityId()
    {
        return $this->container['legal_entity_id'];
    }

    /**
     * Sets legal_entity_id
     *
     * @param  int  $legal_entity_id  The id of the LegalEntity this invoice should be sent for.
     * @return $this
     */
    public function setLegalEntityId($legal_entity_id)
    {
        $this->container['legal_entity_id'] = $legal_entity_id;

        return $this;
    }

    /**
     * Gets idempotency_guid
     *
     * @return string
     */
    public function getIdempotencyGuid()
    {
        return $this->container['idempotency_guid'];
    }

    /**
     * Sets idempotency_guid
     *
     * @param  string  $idempotency_guid  A guid that you generated for this InvoiceSubmission to achieve idempotency. If you submit multiple documents with the same idempotencyGuid, only the first one will be processed.
     * @return $this
     */
    public function setIdempotencyGuid($idempotency_guid)
    {
        if (! is_null($idempotency_guid) && (mb_strlen($idempotency_guid) > 36)) {
            throw new \InvalidArgumentException('invalid length for $idempotency_guid when calling InvoiceSubmission., must be smaller than or equal to 36.');
        }
        if (! is_null($idempotency_guid) && (mb_strlen($idempotency_guid) < 36)) {
            throw new \InvalidArgumentException('invalid length for $idempotency_guid when calling InvoiceSubmission., must be bigger than or equal to 36.');
        }

        $this->container['idempotency_guid'] = $idempotency_guid;

        return $this;
    }

    /**
     * Gets invoice_recipient
     *
     * @return \Deegitalbe\LaravelTrustupIoStorecove\Model\InvoiceRecipient
     */
    public function getInvoiceRecipient()
    {
        return $this->container['invoice_recipient'];
    }

    /**
     * Sets invoice_recipient
     *
     * @param  \Deegitalbe\LaravelTrustupIoStorecove\Model\InvoiceRecipient  $invoice_recipient  DEPRECATED. Use the routing and accountingCustomerParty.publicIdentifiers properties.
     * @return $this
     */
    public function setInvoiceRecipient($invoice_recipient)
    {
        $this->container['invoice_recipient'] = $invoice_recipient;

        return $this;
    }

    /**
     * Gets routing
     *
     * @return \Deegitalbe\LaravelTrustupIoStorecove\Model\Routing
     */
    public function getRouting()
    {
        return $this->container['routing'];
    }

    /**
     * Sets routing
     *
     * @param  \Deegitalbe\LaravelTrustupIoStorecove\Model\Routing  $routing  Specifies where the invoice is to be sent. Can be electronic identifiers or email addresses.
     * @return $this
     */
    public function setRouting($routing)
    {
        $this->container['routing'] = $routing;

        return $this;
    }

    /**
     * Gets attachments
     *
     * @return \Deegitalbe\LaravelTrustupIoStorecove\Model\Attachment[]
     */
    public function getAttachments()
    {
        return $this->container['attachments'];
    }

    /**
     * Sets attachments
     *
     * @param  \Deegitalbe\LaravelTrustupIoStorecove\Model\Attachment[]  $attachments  An array of attachments. You may provide up to 10 attchments, but the total size must not exceed 100MB after Base64 encoding.
     * @return $this
     */
    public function setAttachments($attachments)
    {
        $this->container['attachments'] = $attachments;

        return $this;
    }

    /**
     * Gets document
     *
     * @return string
     */
    public function getDocument()
    {
        return $this->container['document'];
    }

    /**
     * Sets document
     *
     * @param  string  $document  DEPRECATED. Use attachments.
     * @return $this
     */
    public function setDocument($document)
    {
        $this->container['document'] = $document;

        return $this;
    }

    /**
     * Gets document_url
     *
     * @return string
     */
    public function getDocumentUrl()
    {
        return $this->container['document_url'];
    }

    /**
     * Sets document_url
     *
     * @param  string  $document_url  DEPRECATED. Use attachments.
     * @return $this
     */
    public function setDocumentUrl($document_url)
    {
        $this->container['document_url'] = $document_url;

        return $this;
    }

    /**
     * Gets invoice
     *
     * @return \Deegitalbe\LaravelTrustupIoStorecove\Model\Invoice
     */
    public function getInvoice()
    {
        return $this->container['invoice'];
    }

    /**
     * Sets invoice
     *
     * @param  \Deegitalbe\LaravelTrustupIoStorecove\Model\Invoice  $invoice  invoice
     * @return $this
     */
    public function setInvoice($invoice)
    {
        $this->container['invoice'] = $invoice;

        return $this;
    }

    /**
     * Gets invoice_data
     *
     * @return \Deegitalbe\LaravelTrustupIoStorecove\Model\InvoiceData
     */
    public function getInvoiceData()
    {
        return $this->container['invoice_data'];
    }

    /**
     * Sets invoice_data
     *
     * @param  \Deegitalbe\LaravelTrustupIoStorecove\Model\InvoiceData  $invoice_data  invoice_data
     * @return $this
     */
    public function setInvoiceData($invoice_data)
    {
        $this->container['invoice_data'] = $invoice_data;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  int  $offset  Offset
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param  int  $offset  Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param  int  $offset  Offset
     * @param  mixed  $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param  int  $offset  Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
