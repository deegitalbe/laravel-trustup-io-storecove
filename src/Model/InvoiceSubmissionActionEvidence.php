<?php
/**
 * InvoiceSubmissionActionEvidence
 *
 * PHP version 5
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Storecove API
 *
 * Storecove API
 *
 * OpenAPI spec version: 2.0.1
 * Contact: apisupport@storecove.nl
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.24
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Deegitalbe\LaravelTrustupIoStorecove\Model;

use ArrayAccess;
use Deegitalbe\LaravelTrustupIoStorecove\ObjectSerializer;

/**
 * InvoiceSubmissionActionEvidence Class Doc Comment
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InvoiceSubmissionActionEvidence implements ArrayAccess, ModelInterface
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'InvoiceSubmissionActionEvidence';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'transmission_datetime' => 'string',
        'transmission_type' => 'string',
        'transmission_result' => 'string',
        'transmitted_document' => 'string',
        'receiver_response' => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'transmission_datetime' => null,
        'transmission_type' => null,
        'transmission_result' => null,
        'transmitted_document' => null,
        'receiver_response' => null,
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'transmission_datetime' => 'transmission_datetime',
        'transmission_type' => 'transmission_type',
        'transmission_result' => 'transmission_result',
        'transmitted_document' => 'transmitted_document',
        'receiver_response' => 'receiver_response',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'transmission_datetime' => 'setTransmissionDatetime',
        'transmission_type' => 'setTransmissionType',
        'transmission_result' => 'setTransmissionResult',
        'transmitted_document' => 'setTransmittedDocument',
        'receiver_response' => 'setReceiverResponse',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'transmission_datetime' => 'getTransmissionDatetime',
        'transmission_type' => 'getTransmissionType',
        'transmission_result' => 'getTransmissionResult',
        'transmitted_document' => 'getTransmittedDocument',
        'receiver_response' => 'getReceiverResponse',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TRANSMISSION_TYPE_EMAIL = 'email';

    const TRANSMISSION_TYPE_EDI = 'edi';

    const TRANSMISSION_TYPE_AS2 = 'as2';

    const TRANSMISSION_TYPE_PEPPOL = 'peppol';

    const TRANSMISSION_TYPE_SANDBOX = 'sandbox';

    const TRANSMISSION_RESULT_UNKNOWN = 'unknown';

    const TRANSMISSION_RESULT_ACCEPTED = 'accepted';

    const TRANSMISSION_RESULT_REJECTED = 'rejected';

    const TRANSMISSION_RESULT_SEND_ERROR = 'send_error';

    const TRANSMISSION_RESULT_INTERNAL_ERROR = 'internal_error';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTransmissionTypeAllowableValues()
    {
        return [
            self::TRANSMISSION_TYPE_EMAIL,
            self::TRANSMISSION_TYPE_EDI,
            self::TRANSMISSION_TYPE_AS2,
            self::TRANSMISSION_TYPE_PEPPOL,
            self::TRANSMISSION_TYPE_SANDBOX,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTransmissionResultAllowableValues()
    {
        return [
            self::TRANSMISSION_RESULT_UNKNOWN,
            self::TRANSMISSION_RESULT_ACCEPTED,
            self::TRANSMISSION_RESULT_REJECTED,
            self::TRANSMISSION_RESULT_SEND_ERROR,
            self::TRANSMISSION_RESULT_INTERNAL_ERROR,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param  mixed[]  $data  Associated array of property values
     *                         initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->container['transmission_datetime'] = isset($data['transmission_datetime']) ? $data['transmission_datetime'] : null;
        $this->container['transmission_type'] = isset($data['transmission_type']) ? $data['transmission_type'] : null;
        $this->container['transmission_result'] = isset($data['transmission_result']) ? $data['transmission_result'] : null;
        $this->container['transmitted_document'] = isset($data['transmitted_document']) ? $data['transmitted_document'] : null;
        $this->container['receiver_response'] = isset($data['receiver_response']) ? $data['receiver_response'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTransmissionTypeAllowableValues();
        if (! is_null($this->container['transmission_type']) && ! in_array($this->container['transmission_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'transmission_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTransmissionResultAllowableValues();
        if (! is_null($this->container['transmission_result']) && ! in_array($this->container['transmission_result'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'transmission_result', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets transmission_datetime
     *
     * @return string
     */
    public function getTransmissionDatetime()
    {
        return $this->container['transmission_datetime'];
    }

    /**
     * Sets transmission_datetime
     *
     * @param  string  $transmission_datetime  The DateTime of the transmission, as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z.
     * @return $this
     */
    public function setTransmissionDatetime($transmission_datetime)
    {
        $this->container['transmission_datetime'] = $transmission_datetime;

        return $this;
    }

    /**
     * Gets transmission_type
     *
     * @return string
     */
    public function getTransmissionType()
    {
        return $this->container['transmission_type'];
    }

    /**
     * Sets transmission_type
     *
     * @param  string  $transmission_type  How the document was transmitted.
     * @return $this
     */
    public function setTransmissionType($transmission_type)
    {
        $allowedValues = $this->getTransmissionTypeAllowableValues();
        if (! is_null($transmission_type) && ! in_array($transmission_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'transmission_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['transmission_type'] = $transmission_type;

        return $this;
    }

    /**
     * Gets transmission_result
     *
     * @return string
     */
    public function getTransmissionResult()
    {
        return $this->container['transmission_result'];
    }

    /**
     * Sets transmission_result
     *
     * @param  string  $transmission_result  The result of this transmission.
     * @return $this
     */
    public function setTransmissionResult($transmission_result)
    {
        $allowedValues = $this->getTransmissionResultAllowableValues();
        if (! is_null($transmission_result) && ! in_array($transmission_result, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'transmission_result', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['transmission_result'] = $transmission_result;

        return $this;
    }

    /**
     * Gets transmitted_document
     *
     * @return string
     */
    public function getTransmittedDocument()
    {
        return $this->container['transmitted_document'];
    }

    /**
     * Sets transmitted_document
     *
     * @param  string  $transmitted_document  The document that was transmitted.
     * @return $this
     */
    public function setTransmittedDocument($transmitted_document)
    {
        $this->container['transmitted_document'] = $transmitted_document;

        return $this;
    }

    /**
     * Gets receiver_response
     *
     * @return string
     */
    public function getReceiverResponse()
    {
        return $this->container['receiver_response'];
    }

    /**
     * Sets receiver_response
     *
     * @param  string  $receiver_response  The response the receiver sent.
     * @return $this
     */
    public function setReceiverResponse($receiver_response)
    {
        $this->container['receiver_response'] = $receiver_response;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  int  $offset  Offset
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param  int  $offset  Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param  int  $offset  Offset
     * @param  mixed  $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param  int  $offset  Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
