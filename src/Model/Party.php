<?php
/**
 * Party
 *
 * PHP version 5
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Storecove API
 *
 * Storecove API
 *
 * OpenAPI spec version: 2.0.1
 * Contact: apisupport@storecove.nl
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.24
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Deegitalbe\LaravelTrustupIoStorecove\Model;

use ArrayAccess;
use Swagger\Client\ObjectSerializer;

/**
 * Party Class Doc Comment
 *
 * @category Class
 *
 * @description A party that can receive or send invoices
 *
 * @author   Swagger Codegen team
 *
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Party implements ArrayAccess, ModelInterface
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'Party';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'company_name' => 'string',
        'registration_name' => 'string',
        'classification_code' => 'string',
        'address' => '\Deegitalbe\LaravelTrustupIoStorecove\Model\Address',
        'contact' => '\Deegitalbe\LaravelTrustupIoStorecove\Model\Contact',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'company_name' => null,
        'registration_name' => null,
        'classification_code' => null,
        'address' => null,
        'contact' => null,
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'company_name' => 'companyName',
        'registration_name' => 'registrationName',
        'classification_code' => 'classificationCode',
        'address' => 'address',
        'contact' => 'contact',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'company_name' => 'setCompanyName',
        'registration_name' => 'setRegistrationName',
        'classification_code' => 'setClassificationCode',
        'address' => 'setAddress',
        'contact' => 'setContact',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'company_name' => 'getCompanyName',
        'registration_name' => 'getRegistrationName',
        'classification_code' => 'getClassificationCode',
        'address' => 'getAddress',
        'contact' => 'getContact',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param  mixed[]  $data  Associated array of property values
     *                         initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->container['company_name'] = isset($data['company_name']) ? $data['company_name'] : null;
        $this->container['registration_name'] = isset($data['registration_name']) ? $data['registration_name'] : null;
        $this->container['classification_code'] = isset($data['classification_code']) ? $data['classification_code'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['contact'] = isset($data['contact']) ? $data['contact'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (! is_null($this->container['company_name']) && (mb_strlen($this->container['company_name']) < 2)) {
            $invalidProperties[] = "invalid value for 'company_name', the character length must be bigger than or equal to 2.";
        }

        if (! is_null($this->container['classification_code']) && ! preg_match('/^[0-9]{5}$/', $this->container['classification_code'])) {
            $invalidProperties[] = "invalid value for 'classification_code', must be conform to the pattern /^[0-9]{5}$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets company_name
     *
     * @return string
     */
    public function getCompanyName()
    {
        return $this->container['company_name'];
    }

    /**
     * Sets company_name
     *
     * @param  string  $company_name  The name of the company transporting the invoice
     * @return $this
     */
    public function setCompanyName($company_name)
    {

        if (! is_null($company_name) && (mb_strlen($company_name) < 2)) {
            throw new \InvalidArgumentException('invalid length for $company_name when calling Party., must be bigger than or equal to 2.');
        }

        $this->container['company_name'] = $company_name;

        return $this;
    }

    /**
     * Gets registration_name
     *
     * @return string
     */
    public function getRegistrationName()
    {
        return $this->container['registration_name'];
    }

    /**
     * Sets registration_name
     *
     * @param  string  $registration_name  The registration name of the company transporting the invoice
     * @return $this
     */
    public function setRegistrationName($registration_name)
    {
        $this->container['registration_name'] = $registration_name;

        return $this;
    }

    /**
     * Gets classification_code
     *
     * @return string
     */
    public function getClassificationCode()
    {
        return $this->container['classification_code'];
    }

    /**
     * Sets classification_code
     *
     * @param  string  $classification_code  The classification code of the company transporting the invoice. This currently is used only for the Malaysia LHDNM application in selfBillingMode. In that case, it becomes the MSIC of the sender of the purchase invoice.
     * @return $this
     */
    public function setClassificationCode($classification_code)
    {

        if (! is_null($classification_code) && (! preg_match('/^[0-9]{5}$/', $classification_code))) {
            throw new \InvalidArgumentException("invalid value for $classification_code when calling Party., must conform to the pattern /^[0-9]{5}$/.");
        }

        $this->container['classification_code'] = $classification_code;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \Deegitalbe\LaravelTrustupIoStorecove\Model\Address
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param  \Deegitalbe\LaravelTrustupIoStorecove\Model\Address  $address  address
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets contact
     *
     * @return \Deegitalbe\LaravelTrustupIoStorecove\Model\Contact
     */
    public function getContact()
    {
        return $this->container['contact'];
    }

    /**
     * Sets contact
     *
     * @param  \Deegitalbe\LaravelTrustupIoStorecove\Model\Contact  $contact  contact
     * @return $this
     */
    public function setContact($contact)
    {
        $this->container['contact'] = $contact;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  int  $offset  Offset
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param  int  $offset  Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param  int  $offset  Offset
     * @param  mixed  $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param  int  $offset  Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
