<?php
/**
 * PurchaseInvoice
 *
 * PHP version 5
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Storecove API
 *
 * Storecove API
 *
 * OpenAPI spec version: 2.0.1
 * Contact: apisupport@storecove.nl
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.24
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Deegitalbe\LaravelTrustupIoStorecove\Model;

use ArrayAccess;
use Swagger\Client\ObjectSerializer;

/**
 * PurchaseInvoice Class Doc Comment
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PurchaseInvoice implements ArrayAccess, ModelInterface
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'PurchaseInvoice';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'external_user_id' => 'string',
        'external_key' => 'string',
        'document' => 'string',
        'invoice_type' => 'string',
        'vat_reverse_charge' => 'bool',
        'amount_including_vat' => 'float',
        'allowance_charge' => 'float',
        'payment_means' => '\Deegitalbe\LaravelTrustupIoStorecove\Model\PaymentMeansDEPRECATED',
        'accounting' => '\Deegitalbe\LaravelTrustupIoStorecove\Model\PurchaseInvoiceAccountingDetails',
        'payment_means_payment_id' => 'string',
        'guid' => 'string',
        'legal_entity_id' => 'int',
        'system_generated_primary_image' => 'bool',
        'document_type' => 'string',
        'sub_type' => 'string',
        'source' => 'string',
        'tax_system' => 'string',
        'invoice_number' => 'string',
        'issue_date' => 'string',
        'tax_point_date' => 'string',
        'due_date' => 'string',
        'document_currency_code' => 'string',
        'period_start' => 'string',
        'period_end' => 'string',
        'note' => 'string',
        'buyer_reference' => 'string',
        'billing_reference' => 'string',
        'contract_document_reference' => 'string',
        'order_reference' => 'string',
        'project_reference' => 'string',
        'accounting_cost' => 'string',
        'attachments' => '\Deegitalbe\LaravelTrustupIoStorecove\Model\PurchaseInvoiceAttachment[]',
        'sender' => '\Deegitalbe\LaravelTrustupIoStorecove\Model\PurchaseInvoiceSender',
        'payment_terms_note' => 'string',
        'payment_means_array' => '\Deegitalbe\LaravelTrustupIoStorecove\Model\PurchaseInvoicePaymentMeans[]',
        'delivery' => '\Deegitalbe\LaravelTrustupIoStorecove\Model\PurchaseInvoiceDelivery',
        'invoice_lines' => '\Deegitalbe\LaravelTrustupIoStorecove\Model\PurchaseInvoiceInvoiceLine[]',
        'allowance_charges' => '\Deegitalbe\LaravelTrustupIoStorecove\Model\PurchaseInvoiceAllowanceCharge[]',
        'document_totals' => '\Deegitalbe\LaravelTrustupIoStorecove\Model\PurchaseInvoiceDocumentTotals',
        'tax_subtotals' => '\Deegitalbe\LaravelTrustupIoStorecove\Model\PurchaseInvoiceTaxSubtotal[]',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'external_user_id' => null,
        'external_key' => null,
        'document' => null,
        'invoice_type' => null,
        'vat_reverse_charge' => null,
        'amount_including_vat' => null,
        'allowance_charge' => null,
        'payment_means' => null,
        'accounting' => null,
        'payment_means_payment_id' => null,
        'guid' => 'uuid',
        'legal_entity_id' => 'int64',
        'system_generated_primary_image' => null,
        'document_type' => null,
        'sub_type' => null,
        'source' => null,
        'tax_system' => null,
        'invoice_number' => null,
        'issue_date' => null,
        'tax_point_date' => null,
        'due_date' => null,
        'document_currency_code' => null,
        'period_start' => null,
        'period_end' => null,
        'note' => null,
        'buyer_reference' => null,
        'billing_reference' => null,
        'contract_document_reference' => null,
        'order_reference' => null,
        'project_reference' => null,
        'accounting_cost' => null,
        'attachments' => null,
        'sender' => null,
        'payment_terms_note' => null,
        'payment_means_array' => null,
        'delivery' => null,
        'invoice_lines' => null,
        'allowance_charges' => null,
        'document_totals' => null,
        'tax_subtotals' => null,
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'external_user_id' => 'external_user_id',
        'external_key' => 'external_key',
        'document' => 'document',
        'invoice_type' => 'invoice_type',
        'vat_reverse_charge' => 'vat_reverse_charge',
        'amount_including_vat' => 'amount_including_vat',
        'allowance_charge' => 'allowance_charge',
        'payment_means' => 'payment_means',
        'accounting' => 'accounting',
        'payment_means_payment_id' => 'payment_means_payment_id',
        'guid' => 'guid',
        'legal_entity_id' => 'legal_entity_id',
        'system_generated_primary_image' => 'system_generated_primary_image',
        'document_type' => 'document_type',
        'sub_type' => 'sub_type',
        'source' => 'source',
        'tax_system' => 'tax_system',
        'invoice_number' => 'invoice_number',
        'issue_date' => 'issue_date',
        'tax_point_date' => 'tax_point_date',
        'due_date' => 'due_date',
        'document_currency_code' => 'document_currency_code',
        'period_start' => 'period_start',
        'period_end' => 'period_end',
        'note' => 'note',
        'buyer_reference' => 'buyer_reference',
        'billing_reference' => 'billing_reference',
        'contract_document_reference' => 'contract_document_reference',
        'order_reference' => 'order_reference',
        'project_reference' => 'project_reference',
        'accounting_cost' => 'accounting_cost',
        'attachments' => 'attachments',
        'sender' => 'sender',
        'payment_terms_note' => 'payment_terms_note',
        'payment_means_array' => 'payment_means_array',
        'delivery' => 'delivery',
        'invoice_lines' => 'invoice_lines',
        'allowance_charges' => 'allowance_charges',
        'document_totals' => 'document_totals',
        'tax_subtotals' => 'tax_subtotals',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'external_user_id' => 'setExternalUserId',
        'external_key' => 'setExternalKey',
        'document' => 'setDocument',
        'invoice_type' => 'setInvoiceType',
        'vat_reverse_charge' => 'setVatReverseCharge',
        'amount_including_vat' => 'setAmountIncludingVat',
        'allowance_charge' => 'setAllowanceCharge',
        'payment_means' => 'setPaymentMeans',
        'accounting' => 'setAccounting',
        'payment_means_payment_id' => 'setPaymentMeansPaymentId',
        'guid' => 'setGuid',
        'legal_entity_id' => 'setLegalEntityId',
        'system_generated_primary_image' => 'setSystemGeneratedPrimaryImage',
        'document_type' => 'setDocumentType',
        'sub_type' => 'setSubType',
        'source' => 'setSource',
        'tax_system' => 'setTaxSystem',
        'invoice_number' => 'setInvoiceNumber',
        'issue_date' => 'setIssueDate',
        'tax_point_date' => 'setTaxPointDate',
        'due_date' => 'setDueDate',
        'document_currency_code' => 'setDocumentCurrencyCode',
        'period_start' => 'setPeriodStart',
        'period_end' => 'setPeriodEnd',
        'note' => 'setNote',
        'buyer_reference' => 'setBuyerReference',
        'billing_reference' => 'setBillingReference',
        'contract_document_reference' => 'setContractDocumentReference',
        'order_reference' => 'setOrderReference',
        'project_reference' => 'setProjectReference',
        'accounting_cost' => 'setAccountingCost',
        'attachments' => 'setAttachments',
        'sender' => 'setSender',
        'payment_terms_note' => 'setPaymentTermsNote',
        'payment_means_array' => 'setPaymentMeansArray',
        'delivery' => 'setDelivery',
        'invoice_lines' => 'setInvoiceLines',
        'allowance_charges' => 'setAllowanceCharges',
        'document_totals' => 'setDocumentTotals',
        'tax_subtotals' => 'setTaxSubtotals',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'external_user_id' => 'getExternalUserId',
        'external_key' => 'getExternalKey',
        'document' => 'getDocument',
        'invoice_type' => 'getInvoiceType',
        'vat_reverse_charge' => 'getVatReverseCharge',
        'amount_including_vat' => 'getAmountIncludingVat',
        'allowance_charge' => 'getAllowanceCharge',
        'payment_means' => 'getPaymentMeans',
        'accounting' => 'getAccounting',
        'payment_means_payment_id' => 'getPaymentMeansPaymentId',
        'guid' => 'getGuid',
        'legal_entity_id' => 'getLegalEntityId',
        'system_generated_primary_image' => 'getSystemGeneratedPrimaryImage',
        'document_type' => 'getDocumentType',
        'sub_type' => 'getSubType',
        'source' => 'getSource',
        'tax_system' => 'getTaxSystem',
        'invoice_number' => 'getInvoiceNumber',
        'issue_date' => 'getIssueDate',
        'tax_point_date' => 'getTaxPointDate',
        'due_date' => 'getDueDate',
        'document_currency_code' => 'getDocumentCurrencyCode',
        'period_start' => 'getPeriodStart',
        'period_end' => 'getPeriodEnd',
        'note' => 'getNote',
        'buyer_reference' => 'getBuyerReference',
        'billing_reference' => 'getBillingReference',
        'contract_document_reference' => 'getContractDocumentReference',
        'order_reference' => 'getOrderReference',
        'project_reference' => 'getProjectReference',
        'accounting_cost' => 'getAccountingCost',
        'attachments' => 'getAttachments',
        'sender' => 'getSender',
        'payment_terms_note' => 'getPaymentTermsNote',
        'payment_means_array' => 'getPaymentMeansArray',
        'delivery' => 'getDelivery',
        'invoice_lines' => 'getInvoiceLines',
        'allowance_charges' => 'getAllowanceCharges',
        'document_totals' => 'getDocumentTotals',
        'tax_subtotals' => 'getTaxSubtotals',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const INVOICE_TYPE_INVOICE = 'invoice';

    const INVOICE_TYPE_CREDITNOTE = 'creditnote';

    const INVOICE_TYPE_CORRECTIONINVOICE = 'correctioninvoice';

    const DOCUMENT_TYPE_INVOICE = 'invoice';

    const SUB_TYPE_INVOICE = 'invoice';

    const SUB_TYPE_CREDITNOTE = 'creditnote';

    const SUB_TYPE_CORRECTIONINVOICE = 'correctioninvoice';

    const SOURCE_PEPPOL = 'peppol';

    const SOURCE_SCRIPT = 'script';

    const SOURCE_SUPPLIER = 'supplier';

    const SOURCE_EMAIL = 'email';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInvoiceTypeAllowableValues()
    {
        return [
            self::INVOICE_TYPE_INVOICE,
            self::INVOICE_TYPE_CREDITNOTE,
            self::INVOICE_TYPE_CORRECTIONINVOICE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDocumentTypeAllowableValues()
    {
        return [
            self::DOCUMENT_TYPE_INVOICE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSubTypeAllowableValues()
    {
        return [
            self::SUB_TYPE_INVOICE,
            self::SUB_TYPE_CREDITNOTE,
            self::SUB_TYPE_CORRECTIONINVOICE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSourceAllowableValues()
    {
        return [
            self::SOURCE_PEPPOL,
            self::SOURCE_SCRIPT,
            self::SOURCE_SUPPLIER,
            self::SOURCE_EMAIL,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param  mixed[]  $data  Associated array of property values
     *                         initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->container['external_user_id'] = isset($data['external_user_id']) ? $data['external_user_id'] : null;
        $this->container['external_key'] = isset($data['external_key']) ? $data['external_key'] : null;
        $this->container['document'] = isset($data['document']) ? $data['document'] : null;
        $this->container['invoice_type'] = isset($data['invoice_type']) ? $data['invoice_type'] : null;
        $this->container['vat_reverse_charge'] = isset($data['vat_reverse_charge']) ? $data['vat_reverse_charge'] : null;
        $this->container['amount_including_vat'] = isset($data['amount_including_vat']) ? $data['amount_including_vat'] : null;
        $this->container['allowance_charge'] = isset($data['allowance_charge']) ? $data['allowance_charge'] : null;
        $this->container['payment_means'] = isset($data['payment_means']) ? $data['payment_means'] : null;
        $this->container['accounting'] = isset($data['accounting']) ? $data['accounting'] : null;
        $this->container['payment_means_payment_id'] = isset($data['payment_means_payment_id']) ? $data['payment_means_payment_id'] : null;
        $this->container['guid'] = isset($data['guid']) ? $data['guid'] : null;
        $this->container['legal_entity_id'] = isset($data['legal_entity_id']) ? $data['legal_entity_id'] : null;
        $this->container['system_generated_primary_image'] = isset($data['system_generated_primary_image']) ? $data['system_generated_primary_image'] : null;
        $this->container['document_type'] = isset($data['document_type']) ? $data['document_type'] : null;
        $this->container['sub_type'] = isset($data['sub_type']) ? $data['sub_type'] : null;
        $this->container['source'] = isset($data['source']) ? $data['source'] : null;
        $this->container['tax_system'] = isset($data['tax_system']) ? $data['tax_system'] : null;
        $this->container['invoice_number'] = isset($data['invoice_number']) ? $data['invoice_number'] : null;
        $this->container['issue_date'] = isset($data['issue_date']) ? $data['issue_date'] : null;
        $this->container['tax_point_date'] = isset($data['tax_point_date']) ? $data['tax_point_date'] : null;
        $this->container['due_date'] = isset($data['due_date']) ? $data['due_date'] : null;
        $this->container['document_currency_code'] = isset($data['document_currency_code']) ? $data['document_currency_code'] : null;
        $this->container['period_start'] = isset($data['period_start']) ? $data['period_start'] : null;
        $this->container['period_end'] = isset($data['period_end']) ? $data['period_end'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
        $this->container['buyer_reference'] = isset($data['buyer_reference']) ? $data['buyer_reference'] : null;
        $this->container['billing_reference'] = isset($data['billing_reference']) ? $data['billing_reference'] : null;
        $this->container['contract_document_reference'] = isset($data['contract_document_reference']) ? $data['contract_document_reference'] : null;
        $this->container['order_reference'] = isset($data['order_reference']) ? $data['order_reference'] : null;
        $this->container['project_reference'] = isset($data['project_reference']) ? $data['project_reference'] : null;
        $this->container['accounting_cost'] = isset($data['accounting_cost']) ? $data['accounting_cost'] : null;
        $this->container['attachments'] = isset($data['attachments']) ? $data['attachments'] : null;
        $this->container['sender'] = isset($data['sender']) ? $data['sender'] : null;
        $this->container['payment_terms_note'] = isset($data['payment_terms_note']) ? $data['payment_terms_note'] : null;
        $this->container['payment_means_array'] = isset($data['payment_means_array']) ? $data['payment_means_array'] : null;
        $this->container['delivery'] = isset($data['delivery']) ? $data['delivery'] : null;
        $this->container['invoice_lines'] = isset($data['invoice_lines']) ? $data['invoice_lines'] : null;
        $this->container['allowance_charges'] = isset($data['allowance_charges']) ? $data['allowance_charges'] : null;
        $this->container['document_totals'] = isset($data['document_totals']) ? $data['document_totals'] : null;
        $this->container['tax_subtotals'] = isset($data['tax_subtotals']) ? $data['tax_subtotals'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getInvoiceTypeAllowableValues();
        if (! is_null($this->container['invoice_type']) && ! in_array($this->container['invoice_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'invoice_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDocumentTypeAllowableValues();
        if (! is_null($this->container['document_type']) && ! in_array($this->container['document_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'document_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSubTypeAllowableValues();
        if (! is_null($this->container['sub_type']) && ! in_array($this->container['sub_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'sub_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSourceAllowableValues();
        if (! is_null($this->container['source']) && ! in_array($this->container['source'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'source', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets external_user_id
     *
     * @return string
     */
    public function getExternalUserId()
    {
        return $this->container['external_user_id'];
    }

    /**
     * Sets external_user_id
     *
     * @param  string  $external_user_id  Deprecated. Used for the embedded portal retrieval service. The external_user_id you provided when the ShopAccount was created.
     * @return $this
     */
    public function setExternalUserId($external_user_id)
    {
        $this->container['external_user_id'] = $external_user_id;

        return $this;
    }

    /**
     * Gets external_key
     *
     * @return string
     */
    public function getExternalKey()
    {
        return $this->container['external_key'];
    }

    /**
     * Sets external_key
     *
     * @param  string  $external_key  Deprecated. Used for accountants. The id you specified for the organization.
     * @return $this
     */
    public function setExternalKey($external_key)
    {
        $this->container['external_key'] = $external_key;

        return $this;
    }

    /**
     * Gets document
     *
     * @return string
     */
    public function getDocument()
    {
        return $this->container['document'];
    }

    /**
     * Sets document
     *
     * @param  string  $document  DEPRECATED. Use the new atatchments array.
     * @return $this
     */
    public function setDocument($document)
    {
        $this->container['document'] = $document;

        return $this;
    }

    /**
     * Gets invoice_type
     *
     * @return string
     */
    public function getInvoiceType()
    {
        return $this->container['invoice_type'];
    }

    /**
     * Sets invoice_type
     *
     * @param  string  $invoice_type  The type of invoice.
     * @return $this
     */
    public function setInvoiceType($invoice_type)
    {
        $allowedValues = $this->getInvoiceTypeAllowableValues();
        if (! is_null($invoice_type) && ! in_array($invoice_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'invoice_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['invoice_type'] = $invoice_type;

        return $this;
    }

    /**
     * Gets vat_reverse_charge
     *
     * @return bool
     */
    public function getVatReverseCharge()
    {
        return $this->container['vat_reverse_charge'];
    }

    /**
     * Sets vat_reverse_charge
     *
     * @param  bool  $vat_reverse_charge  DEPRECATED - This is now part of each invoice line.
     * @return $this
     */
    public function setVatReverseCharge($vat_reverse_charge)
    {
        $this->container['vat_reverse_charge'] = $vat_reverse_charge;

        return $this;
    }

    /**
     * Gets amount_including_vat
     *
     * @return float
     */
    public function getAmountIncludingVat()
    {
        return $this->container['amount_including_vat'];
    }

    /**
     * Sets amount_including_vat
     *
     * @param  float  $amount_including_vat  DEPRECATED - Use amount_including_tax.
     * @return $this
     */
    public function setAmountIncludingVat($amount_including_vat)
    {
        $this->container['amount_including_vat'] = $amount_including_vat;

        return $this;
    }

    /**
     * Gets allowance_charge
     *
     * @return float
     */
    public function getAllowanceCharge()
    {
        return $this->container['allowance_charge'];
    }

    /**
     * Sets allowance_charge
     *
     * @param  float  $allowance_charge  DEPRECATED - Use the allowance_charges array.
     * @return $this
     */
    public function setAllowanceCharge($allowance_charge)
    {
        $this->container['allowance_charge'] = $allowance_charge;

        return $this;
    }

    /**
     * Gets payment_means
     *
     * @return \Deegitalbe\LaravelTrustupIoStorecove\Model\PaymentMeansDEPRECATED
     */
    public function getPaymentMeans()
    {
        return $this->container['payment_means'];
    }

    /**
     * Sets payment_means
     *
     * @param  \Deegitalbe\LaravelTrustupIoStorecove\Model\PaymentMeansDEPRECATED  $payment_means  payment_means
     * @return $this
     */
    public function setPaymentMeans($payment_means)
    {
        $this->container['payment_means'] = $payment_means;

        return $this;
    }

    /**
     * Gets accounting
     *
     * @return \Deegitalbe\LaravelTrustupIoStorecove\Model\PurchaseInvoiceAccountingDetails
     */
    public function getAccounting()
    {
        return $this->container['accounting'];
    }

    /**
     * Sets accounting
     *
     * @param  \Deegitalbe\LaravelTrustupIoStorecove\Model\PurchaseInvoiceAccountingDetails  $accounting  DEPRECATED - The accounting details for the invoice. Will only evern contain null properties.
     * @return $this
     */
    public function setAccounting($accounting)
    {
        $this->container['accounting'] = $accounting;

        return $this;
    }

    /**
     * Gets payment_means_payment_id
     *
     * @return string
     */
    public function getPaymentMeansPaymentId()
    {
        return $this->container['payment_means_payment_id'];
    }

    /**
     * Sets payment_means_payment_id
     *
     * @param  string  $payment_means_payment_id  DEPRECATED - use the payment_id property in the payment_means_array
     * @return $this
     */
    public function setPaymentMeansPaymentId($payment_means_payment_id)
    {
        $this->container['payment_means_payment_id'] = $payment_means_payment_id;

        return $this;
    }

    /**
     * Gets guid
     *
     * @return string
     */
    public function getGuid()
    {
        return $this->container['guid'];
    }

    /**
     * Sets guid
     *
     * @param  string  $guid  The GUID of the invoice
     * @return $this
     */
    public function setGuid($guid)
    {
        $this->container['guid'] = $guid;

        return $this;
    }

    /**
     * Gets legal_entity_id
     *
     * @return int
     */
    public function getLegalEntityId()
    {
        return $this->container['legal_entity_id'];
    }

    /**
     * Sets legal_entity_id
     *
     * @param  int  $legal_entity_id  The id of the LegalEntity the invoice was received for.
     * @return $this
     */
    public function setLegalEntityId($legal_entity_id)
    {
        $this->container['legal_entity_id'] = $legal_entity_id;

        return $this;
    }

    /**
     * Gets system_generated_primary_image
     *
     * @return bool
     */
    public function getSystemGeneratedPrimaryImage()
    {
        return $this->container['system_generated_primary_image'];
    }

    /**
     * Sets system_generated_primary_image
     *
     * @param  bool  $system_generated_primary_image  Whether or not the document image (PDF) was generated by Storecove. If true, it means the invoice was received without any attachments and Storecove generated one for you. If false, the invoice will contain at least one attachment, which was received from the invoice sender.
     * @return $this
     */
    public function setSystemGeneratedPrimaryImage($system_generated_primary_image)
    {
        $this->container['system_generated_primary_image'] = $system_generated_primary_image;

        return $this;
    }

    /**
     * Gets document_type
     *
     * @return string
     */
    public function getDocumentType()
    {
        return $this->container['document_type'];
    }

    /**
     * Sets document_type
     *
     * @param  string  $document_type  The type of document. Only \"invoice\" for now.
     * @return $this
     */
    public function setDocumentType($document_type)
    {
        $allowedValues = $this->getDocumentTypeAllowableValues();
        if (! is_null($document_type) && ! in_array($document_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'document_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['document_type'] = $document_type;

        return $this;
    }

    /**
     * Gets sub_type
     *
     * @return string
     */
    public function getSubType()
    {
        return $this->container['sub_type'];
    }

    /**
     * Sets sub_type
     *
     * @param  string  $sub_type  The subtype of document.
     * @return $this
     */
    public function setSubType($sub_type)
    {
        $allowedValues = $this->getSubTypeAllowableValues();
        if (! is_null($sub_type) && ! in_array($sub_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'sub_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sub_type'] = $sub_type;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param  string  $source  The source the invoice was received from.
     * @return $this
     */
    public function setSource($source)
    {
        $allowedValues = $this->getSourceAllowableValues();
        if (! is_null($source) && ! in_array($source, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'source', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets tax_system
     *
     * @return string
     */
    public function getTaxSystem()
    {
        return $this->container['tax_system'];
    }

    /**
     * Sets tax_system
     *
     * @param  string  $tax_system  The tax system of the invoice. Either tax_line_percentages or tax_line_amounts. The first tax system means the invoice lines contain only the tax percentages and the tax amounts are included only in the tax subtotals at the invoice level and so are only calculated at the invoice level. The tax system tax_line_amounts means that in addition to the percentage, each invoice line also contains the tax amount. The tax subtotals at the invoice level are calculated as the sum of the tax of the invoice lines. The distinction between the two tax systems has has implications for rounding.
     * @return $this
     */
    public function setTaxSystem($tax_system)
    {
        $this->container['tax_system'] = $tax_system;

        return $this;
    }

    /**
     * Gets invoice_number
     *
     * @return string
     */
    public function getInvoiceNumber()
    {
        return $this->container['invoice_number'];
    }

    /**
     * Sets invoice_number
     *
     * @param  string  $invoice_number  The invoicenumber.
     * @return $this
     */
    public function setInvoiceNumber($invoice_number)
    {
        $this->container['invoice_number'] = $invoice_number;

        return $this;
    }

    /**
     * Gets issue_date
     *
     * @return string
     */
    public function getIssueDate()
    {
        return $this->container['issue_date'];
    }

    /**
     * Sets issue_date
     *
     * @param  string  $issue_date  The date the invoice was issued. Format \"YYYY-MM-DD\".
     * @return $this
     */
    public function setIssueDate($issue_date)
    {
        $this->container['issue_date'] = $issue_date;

        return $this;
    }

    /**
     * Gets tax_point_date
     *
     * @return string
     */
    public function getTaxPointDate()
    {
        return $this->container['tax_point_date'];
    }

    /**
     * Sets tax_point_date
     *
     * @param  string  $tax_point_date  The date the invoice was issued for tax purposes. In most countries MUST match the issue_date. Format \"YYYY-MM-DD\".
     * @return $this
     */
    public function setTaxPointDate($tax_point_date)
    {
        $this->container['tax_point_date'] = $tax_point_date;

        return $this;
    }

    /**
     * Gets due_date
     *
     * @return string
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     *
     * @param  string  $due_date  The date the invoice must be payed by. Format \"YYYY-MM-DD\".
     * @return $this
     */
    public function setDueDate($due_date)
    {
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets document_currency_code
     *
     * @return string
     */
    public function getDocumentCurrencyCode()
    {
        return $this->container['document_currency_code'];
    }

    /**
     * Sets document_currency_code
     *
     * @param  string  $document_currency_code  The ISO 4217 currency for the invoice.
     * @return $this
     */
    public function setDocumentCurrencyCode($document_currency_code)
    {
        $this->container['document_currency_code'] = $document_currency_code;

        return $this;
    }

    /**
     * Gets period_start
     *
     * @return string
     */
    public function getPeriodStart()
    {
        return $this->container['period_start'];
    }

    /**
     * Sets period_start
     *
     * @param  string  $period_start  The start date of the period this invoice relates to. Format \"YYYY-MM-DD\".
     * @return $this
     */
    public function setPeriodStart($period_start)
    {
        $this->container['period_start'] = $period_start;

        return $this;
    }

    /**
     * Gets period_end
     *
     * @return string
     */
    public function getPeriodEnd()
    {
        return $this->container['period_end'];
    }

    /**
     * Sets period_end
     *
     * @param  string  $period_end  The end date of the period this invoice relates to. Format \"YYYY-MM-DD\".
     * @return $this
     */
    public function setPeriodEnd($period_end)
    {
        $this->container['period_end'] = $period_end;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param  string  $note  The invoice level note.
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets buyer_reference
     *
     * @return string
     */
    public function getBuyerReference()
    {
        return $this->container['buyer_reference'];
    }

    /**
     * Sets buyer_reference
     *
     * @param  string  $buyer_reference  Reference provided by the buyer. Used for routing.
     * @return $this
     */
    public function setBuyerReference($buyer_reference)
    {
        $this->container['buyer_reference'] = $buyer_reference;

        return $this;
    }

    /**
     * Gets billing_reference
     *
     * @return string
     */
    public function getBillingReference()
    {
        return $this->container['billing_reference'];
    }

    /**
     * Sets billing_reference
     *
     * @param  string  $billing_reference  Reference to the previous invoice this invoice relates to.
     * @return $this
     */
    public function setBillingReference($billing_reference)
    {
        $this->container['billing_reference'] = $billing_reference;

        return $this;
    }

    /**
     * Gets contract_document_reference
     *
     * @return string
     */
    public function getContractDocumentReference()
    {
        return $this->container['contract_document_reference'];
    }

    /**
     * Sets contract_document_reference
     *
     * @param  string  $contract_document_reference  Reference to the contract.
     * @return $this
     */
    public function setContractDocumentReference($contract_document_reference)
    {
        $this->container['contract_document_reference'] = $contract_document_reference;

        return $this;
    }

    /**
     * Gets order_reference
     *
     * @return string
     */
    public function getOrderReference()
    {
        return $this->container['order_reference'];
    }

    /**
     * Sets order_reference
     *
     * @param  string  $order_reference  Reference to the order. Used for matching the invoice to an order.
     * @return $this
     */
    public function setOrderReference($order_reference)
    {
        $this->container['order_reference'] = $order_reference;

        return $this;
    }

    /**
     * Gets project_reference
     *
     * @return string
     */
    public function getProjectReference()
    {
        return $this->container['project_reference'];
    }

    /**
     * Sets project_reference
     *
     * @param  string  $project_reference  Reference to the project.
     * @return $this
     */
    public function setProjectReference($project_reference)
    {
        $this->container['project_reference'] = $project_reference;

        return $this;
    }

    /**
     * Gets accounting_cost
     *
     * @return string
     */
    public function getAccountingCost()
    {
        return $this->container['accounting_cost'];
    }

    /**
     * Sets accounting_cost
     *
     * @param  string  $accounting_cost  The accounting cost code.
     * @return $this
     */
    public function setAccountingCost($accounting_cost)
    {
        $this->container['accounting_cost'] = $accounting_cost;

        return $this;
    }

    /**
     * Gets attachments
     *
     * @return \Deegitalbe\LaravelTrustupIoStorecove\Model\PurchaseInvoiceAttachment[]
     */
    public function getAttachments()
    {
        return $this->container['attachments'];
    }

    /**
     * Sets attachments
     *
     * @param  \Deegitalbe\LaravelTrustupIoStorecove\Model\PurchaseInvoiceAttachment[]  $attachments  attachments
     * @return $this
     */
    public function setAttachments($attachments)
    {
        $this->container['attachments'] = $attachments;

        return $this;
    }

    /**
     * Gets sender
     *
     * @return \Deegitalbe\LaravelTrustupIoStorecove\Model\PurchaseInvoiceSender
     */
    public function getSender()
    {
        return $this->container['sender'];
    }

    /**
     * Sets sender
     *
     * @param  \Deegitalbe\LaravelTrustupIoStorecove\Model\PurchaseInvoiceSender  $sender  The organzation that sent the invoice.
     * @return $this
     */
    public function setSender($sender)
    {
        $this->container['sender'] = $sender;

        return $this;
    }

    /**
     * Gets payment_terms_note
     *
     * @return string
     */
    public function getPaymentTermsNote()
    {
        return $this->container['payment_terms_note'];
    }

    /**
     * Sets payment_terms_note
     *
     * @param  string  $payment_terms_note  A textual description of the payment terms.
     * @return $this
     */
    public function setPaymentTermsNote($payment_terms_note)
    {
        $this->container['payment_terms_note'] = $payment_terms_note;

        return $this;
    }

    /**
     * Gets payment_means_array
     *
     * @return \Deegitalbe\LaravelTrustupIoStorecove\Model\PurchaseInvoicePaymentMeans[]
     */
    public function getPaymentMeansArray()
    {
        return $this->container['payment_means_array'];
    }

    /**
     * Sets payment_means_array
     *
     * @param  \Deegitalbe\LaravelTrustupIoStorecove\Model\PurchaseInvoicePaymentMeans[]  $payment_means_array  The different payment means that can be used to pay the invoice.
     * @return $this
     */
    public function setPaymentMeansArray($payment_means_array)
    {
        $this->container['payment_means_array'] = $payment_means_array;

        return $this;
    }

    /**
     * Gets delivery
     *
     * @return \Deegitalbe\LaravelTrustupIoStorecove\Model\PurchaseInvoiceDelivery
     */
    public function getDelivery()
    {
        return $this->container['delivery'];
    }

    /**
     * Sets delivery
     *
     * @param  \Deegitalbe\LaravelTrustupIoStorecove\Model\PurchaseInvoiceDelivery  $delivery  delivery
     * @return $this
     */
    public function setDelivery($delivery)
    {
        $this->container['delivery'] = $delivery;

        return $this;
    }

    /**
     * Gets invoice_lines
     *
     * @return \Deegitalbe\LaravelTrustupIoStorecove\Model\PurchaseInvoiceInvoiceLine[]
     */
    public function getInvoiceLines()
    {
        return $this->container['invoice_lines'];
    }

    /**
     * Sets invoice_lines
     *
     * @param  \Deegitalbe\LaravelTrustupIoStorecove\Model\PurchaseInvoiceInvoiceLine[]  $invoice_lines  invoice_lines
     * @return $this
     */
    public function setInvoiceLines($invoice_lines)
    {
        $this->container['invoice_lines'] = $invoice_lines;

        return $this;
    }

    /**
     * Gets allowance_charges
     *
     * @return \Deegitalbe\LaravelTrustupIoStorecove\Model\PurchaseInvoiceAllowanceCharge[]
     */
    public function getAllowanceCharges()
    {
        return $this->container['allowance_charges'];
    }

    /**
     * Sets allowance_charges
     *
     * @param  \Deegitalbe\LaravelTrustupIoStorecove\Model\PurchaseInvoiceAllowanceCharge[]  $allowance_charges  allowance_charges
     * @return $this
     */
    public function setAllowanceCharges($allowance_charges)
    {
        $this->container['allowance_charges'] = $allowance_charges;

        return $this;
    }

    /**
     * Gets document_totals
     *
     * @return \Deegitalbe\LaravelTrustupIoStorecove\Model\PurchaseInvoiceDocumentTotals
     */
    public function getDocumentTotals()
    {
        return $this->container['document_totals'];
    }

    /**
     * Sets document_totals
     *
     * @param  \Deegitalbe\LaravelTrustupIoStorecove\Model\PurchaseInvoiceDocumentTotals  $document_totals  The total amounts for this document.
     * @return $this
     */
    public function setDocumentTotals($document_totals)
    {
        $this->container['document_totals'] = $document_totals;

        return $this;
    }

    /**
     * Gets tax_subtotals
     *
     * @return \Deegitalbe\LaravelTrustupIoStorecove\Model\PurchaseInvoiceTaxSubtotal[]
     */
    public function getTaxSubtotals()
    {
        return $this->container['tax_subtotals'];
    }

    /**
     * Sets tax_subtotals
     *
     * @param  \Deegitalbe\LaravelTrustupIoStorecove\Model\PurchaseInvoiceTaxSubtotal[]  $tax_subtotals  tax_subtotals
     * @return $this
     */
    public function setTaxSubtotals($tax_subtotals)
    {
        $this->container['tax_subtotals'] = $tax_subtotals;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  int  $offset  Offset
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param  int  $offset  Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param  int  $offset  Offset
     * @param  mixed  $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param  int  $offset  Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
