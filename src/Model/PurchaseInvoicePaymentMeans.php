<?php
/**
 * PurchaseInvoicePaymentMeans
 *
 * PHP version 5
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Storecove API
 *
 * Storecove API
 *
 * OpenAPI spec version: 2.0.1
 * Contact: apisupport@storecove.nl
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.24
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Deegitalbe\LaravelTrustupIoStorecove\Model;

use ArrayAccess;
use Deegitalbe\LaravelTrustupIoStorecove\ObjectSerializer;

/**
 * PurchaseInvoicePaymentMeans Class Doc Comment
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PurchaseInvoicePaymentMeans implements ArrayAccess, ModelInterface
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'PurchaseInvoicePaymentMeans';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'type' => 'string',
        'account' => 'string',
        'holder' => 'string',
        'branch_code' => 'string',
        'mandate' => 'string',
        'network' => 'string',
        'payment_id' => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'type' => null,
        'account' => null,
        'holder' => null,
        'branch_code' => null,
        'mandate' => null,
        'network' => null,
        'payment_id' => null,
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'account' => 'account',
        'holder' => 'holder',
        'branch_code' => 'branch_code',
        'mandate' => 'mandate',
        'network' => 'network',
        'payment_id' => 'payment_id',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'account' => 'setAccount',
        'holder' => 'setHolder',
        'branch_code' => 'setBranchCode',
        'mandate' => 'setMandate',
        'network' => 'setNetwork',
        'payment_id' => 'setPaymentId',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'account' => 'getAccount',
        'holder' => 'getHolder',
        'branch_code' => 'getBranchCode',
        'mandate' => 'getMandate',
        'network' => 'getNetwork',
        'payment_id' => 'getPaymentId',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_BANK_PAYMENT_MEAN = 'BankPaymentMean';

    const TYPE_DIRECT_DEBIT_PAYMENT_MEAN = 'DirectDebitPaymentMean';

    const TYPE_CARD_PAYMENT_MEAN = 'CardPaymentMean';

    const TYPE_NPP_PAYMENT_MEAN = 'NppPaymentMean';

    const TYPE_SE_BANK_GIRO_PAYMENT_MEAN = 'SeBankGiroPaymentMean';

    const TYPE_SE_PLUSGIRO_PAYMENT_MEAN = 'SePlusgiroPaymentMean';

    const TYPE_SG_CARD_PAYMENT_MEAN = 'SgCardPaymentMean';

    const TYPE_SG_GIRO_PAYMENT_MEAN = 'SgGiroPaymentMean';

    const TYPE_SG_PAYNOW_PAYMENT_MEAN = 'SgPaynowPaymentMean';

    const TYPE_CREDIT_TRANSFER_PAYMENT_MEAN = 'CreditTransferPaymentMean';

    const TYPE_CREDIT_CARD_PAYMENT_MEAN = 'CreditCardPaymentMean';

    const TYPE_SE_BANKGIRO_PAYMENT_MEAN = 'SeBankgiroPaymentMean';

    const TYPE_AUNZ_NPP_PAYID_PAYMENT_MEAN = 'AunzNppPayidPaymentMean';

    const TYPE_ONLINE_PAYMENT_SERVICE_PAYMENT_MEAN = 'OnlinePaymentServicePaymentMean';

    const TYPE_STANDING_AGREEMENT_PAYMENT_MEAN = 'StandingAgreementPaymentMean';

    const TYPE_AUNZ_NPP_PAYTO_PAYMENT_MEAN = 'AunzNppPaytoPaymentMean';

    const TYPE_AUNZ_BPAY_PAYMENT_MEAN = 'AunzBpayPaymentMean';

    const TYPE_AUNZ_POSTBILLPAY_PAYMENT_MEAN = 'AunzPostbillpayPaymentMean';

    const TYPE_AUNZ_URI_PAYMENT_MEAN = 'AunzUriPaymentMean';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_BANK_PAYMENT_MEAN,
            self::TYPE_DIRECT_DEBIT_PAYMENT_MEAN,
            self::TYPE_CARD_PAYMENT_MEAN,
            self::TYPE_NPP_PAYMENT_MEAN,
            self::TYPE_SE_BANK_GIRO_PAYMENT_MEAN,
            self::TYPE_SE_PLUSGIRO_PAYMENT_MEAN,
            self::TYPE_SG_CARD_PAYMENT_MEAN,
            self::TYPE_SG_GIRO_PAYMENT_MEAN,
            self::TYPE_SG_PAYNOW_PAYMENT_MEAN,
            self::TYPE_CREDIT_TRANSFER_PAYMENT_MEAN,
            self::TYPE_CREDIT_CARD_PAYMENT_MEAN,
            self::TYPE_SE_BANKGIRO_PAYMENT_MEAN,
            self::TYPE_AUNZ_NPP_PAYID_PAYMENT_MEAN,
            self::TYPE_ONLINE_PAYMENT_SERVICE_PAYMENT_MEAN,
            self::TYPE_STANDING_AGREEMENT_PAYMENT_MEAN,
            self::TYPE_AUNZ_NPP_PAYTO_PAYMENT_MEAN,
            self::TYPE_AUNZ_BPAY_PAYMENT_MEAN,
            self::TYPE_AUNZ_POSTBILLPAY_PAYMENT_MEAN,
            self::TYPE_AUNZ_URI_PAYMENT_MEAN,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param  mixed[]  $data  Associated array of property values
     *                         initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['account'] = isset($data['account']) ? $data['account'] : null;
        $this->container['holder'] = isset($data['holder']) ? $data['holder'] : null;
        $this->container['branch_code'] = isset($data['branch_code']) ? $data['branch_code'] : null;
        $this->container['mandate'] = isset($data['mandate']) ? $data['mandate'] : null;
        $this->container['network'] = isset($data['network']) ? $data['network'] : null;
        $this->container['payment_id'] = isset($data['payment_id']) ? $data['payment_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (! is_null($this->container['type']) && ! in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param  string  $type  The type of payment means. Which type are returned is determined by the &pmv= query parameter. For details see documentation for that field.
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (! is_null($type) && ! in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets account
     *
     * @return string
     */
    public function getAccount()
    {
        return $this->container['account'];
    }

    /**
     * Sets account
     *
     * @param  string  $account  The account number to which to transfer.
     * @return $this
     */
    public function setAccount($account)
    {
        $this->container['account'] = $account;

        return $this;
    }

    /**
     * Gets holder
     *
     * @return string
     */
    public function getHolder()
    {
        return $this->container['holder'];
    }

    /**
     * Sets holder
     *
     * @param  string  $holder  The account holder name to which to transfer.
     * @return $this
     */
    public function setHolder($holder)
    {
        $this->container['holder'] = $holder;

        return $this;
    }

    /**
     * Gets branch_code
     *
     * @return string
     */
    public function getBranchCode()
    {
        return $this->container['branch_code'];
    }

    /**
     * Sets branch_code
     *
     * @param  string  $branch_code  The code identifying the bank branch. May contain a BIC/SWIFT or something appropriate for the payment method, such as \"NPP\" for type NppPaymentMean.
     * @return $this
     */
    public function setBranchCode($branch_code)
    {
        $this->container['branch_code'] = $branch_code;

        return $this;
    }

    /**
     * Gets mandate
     *
     * @return string
     */
    public function getMandate()
    {
        return $this->container['mandate'];
    }

    /**
     * Sets mandate
     *
     * @param  string  $mandate  The mandate, used only for type DirectDebitPaymentMean.
     * @return $this
     */
    public function setMandate($mandate)
    {
        $this->container['mandate'] = $mandate;

        return $this;
    }

    /**
     * Gets network
     *
     * @return string
     */
    public function getNetwork()
    {
        return $this->container['network'];
    }

    /**
     * Sets network
     *
     * @param  string  $network  The payment network. Used only for type CardPaymentType.
     * @return $this
     */
    public function setNetwork($network)
    {
        $this->container['network'] = $network;

        return $this;
    }

    /**
     * Gets payment_id
     *
     * @return string
     */
    public function getPaymentId()
    {
        return $this->container['payment_id'];
    }

    /**
     * Sets payment_id
     *
     * @param  string  $payment_id  The payment id to use when making the payment. The invoice sender will use this to match the received funds to the invoice.
     * @return $this
     */
    public function setPaymentId($payment_id)
    {
        $this->container['payment_id'] = $payment_id;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  int  $offset  Offset
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param  int  $offset  Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param  int  $offset  Offset
     * @param  mixed  $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param  int  $offset  Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
