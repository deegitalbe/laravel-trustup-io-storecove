<?php
/**
 * PurchaseInvoiceUbl
 *
 * PHP version 5
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Storecove API
 *
 * Storecove API
 *
 * OpenAPI spec version: 2.0.1
 * Contact: apisupport@storecove.nl
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.24
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Deegitalbe\LaravelTrustupIoStorecove\Model;

use ArrayAccess;
use Deegitalbe\LaravelTrustupIoStorecove\ObjectSerializer;

/**
 * PurchaseInvoiceUbl Class Doc Comment
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PurchaseInvoiceUbl implements ArrayAccess, ModelInterface
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'PurchaseInvoiceUbl';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'guid' => 'string',
        'tax_system' => 'string',
        'legal_entity_id' => 'int',
        'external_user_id' => 'string',
        'external_key' => 'string',
        'system_generated_primary_image' => 'bool',
        'ubl' => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'guid' => 'uuid',
        'tax_system' => null,
        'legal_entity_id' => 'int64',
        'external_user_id' => null,
        'external_key' => null,
        'system_generated_primary_image' => null,
        'ubl' => null,
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'guid' => 'guid',
        'tax_system' => 'tax_system',
        'legal_entity_id' => 'legal_entity_id',
        'external_user_id' => 'external_user_id',
        'external_key' => 'external_key',
        'system_generated_primary_image' => 'system_generated_primary_image',
        'ubl' => 'ubl',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'guid' => 'setGuid',
        'tax_system' => 'setTaxSystem',
        'legal_entity_id' => 'setLegalEntityId',
        'external_user_id' => 'setExternalUserId',
        'external_key' => 'setExternalKey',
        'system_generated_primary_image' => 'setSystemGeneratedPrimaryImage',
        'ubl' => 'setUbl',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'guid' => 'getGuid',
        'tax_system' => 'getTaxSystem',
        'legal_entity_id' => 'getLegalEntityId',
        'external_user_id' => 'getExternalUserId',
        'external_key' => 'getExternalKey',
        'system_generated_primary_image' => 'getSystemGeneratedPrimaryImage',
        'ubl' => 'getUbl',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param  mixed[]  $data  Associated array of property values
     *                         initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->container['guid'] = isset($data['guid']) ? $data['guid'] : null;
        $this->container['tax_system'] = isset($data['tax_system']) ? $data['tax_system'] : null;
        $this->container['legal_entity_id'] = isset($data['legal_entity_id']) ? $data['legal_entity_id'] : null;
        $this->container['external_user_id'] = isset($data['external_user_id']) ? $data['external_user_id'] : null;
        $this->container['external_key'] = isset($data['external_key']) ? $data['external_key'] : null;
        $this->container['system_generated_primary_image'] = isset($data['system_generated_primary_image']) ? $data['system_generated_primary_image'] : null;
        $this->container['ubl'] = isset($data['ubl']) ? $data['ubl'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets guid
     *
     * @return string
     */
    public function getGuid()
    {
        return $this->container['guid'];
    }

    /**
     * Sets guid
     *
     * @param  string  $guid  The GUID of the invoice
     * @return $this
     */
    public function setGuid($guid)
    {
        $this->container['guid'] = $guid;

        return $this;
    }

    /**
     * Gets tax_system
     *
     * @return string
     */
    public function getTaxSystem()
    {
        return $this->container['tax_system'];
    }

    /**
     * Sets tax_system
     *
     * @param  string  $tax_system  The tax system of the invoice. Either tax_line_percentages or tax_line_amounts. The first tax system means the invoice lines contain only the tax percentages and the tax amounts are included only in the tax subtotals at the invoice level and so are only calculated at the invoice level. The tax system tax_line_amounts means that in addition to the percentage, each invoice line also contains the tax amount. The tax subtotals at the invoice level are calculated as the sum of the tax of the invoice lines. The distinction between the two tax systems has has implications for rounding.
     * @return $this
     */
    public function setTaxSystem($tax_system)
    {
        $this->container['tax_system'] = $tax_system;

        return $this;
    }

    /**
     * Gets legal_entity_id
     *
     * @return int
     */
    public function getLegalEntityId()
    {
        return $this->container['legal_entity_id'];
    }

    /**
     * Sets legal_entity_id
     *
     * @param  int  $legal_entity_id  The id of the LegalEntity the invoice was received for.
     * @return $this
     */
    public function setLegalEntityId($legal_entity_id)
    {
        $this->container['legal_entity_id'] = $legal_entity_id;

        return $this;
    }

    /**
     * Gets external_user_id
     *
     * @return string
     */
    public function getExternalUserId()
    {
        return $this->container['external_user_id'];
    }

    /**
     * Sets external_user_id
     *
     * @param  string  $external_user_id  Used for the embedded portal retrieval service. The external_user_id you provided when the ShopAccount was created.
     * @return $this
     */
    public function setExternalUserId($external_user_id)
    {
        $this->container['external_user_id'] = $external_user_id;

        return $this;
    }

    /**
     * Gets external_key
     *
     * @return string
     */
    public function getExternalKey()
    {
        return $this->container['external_key'];
    }

    /**
     * Sets external_key
     *
     * @param  string  $external_key  Used for accountants. The id you specified for the organization.
     * @return $this
     */
    public function setExternalKey($external_key)
    {
        $this->container['external_key'] = $external_key;

        return $this;
    }

    /**
     * Gets system_generated_primary_image
     *
     * @return bool
     */
    public function getSystemGeneratedPrimaryImage()
    {
        return $this->container['system_generated_primary_image'];
    }

    /**
     * Sets system_generated_primary_image
     *
     * @param  bool  $system_generated_primary_image  Whether or not the document image (PDF) was generated by Storecove. If true, it means the invoice was received without any attachments and Storecove generated one for you. If false, the invoice will contain at least one attachment, which was received from the invoice sender.
     * @return $this
     */
    public function setSystemGeneratedPrimaryImage($system_generated_primary_image)
    {
        $this->container['system_generated_primary_image'] = $system_generated_primary_image;

        return $this;
    }

    /**
     * Gets ubl
     *
     * @return string
     */
    public function getUbl()
    {
        return $this->container['ubl'];
    }

    /**
     * Sets ubl
     *
     * @param  string  $ubl  The Base64 encoded UBL invoice.
     * @return $this
     */
    public function setUbl($ubl)
    {
        $this->container['ubl'] = $ubl;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  int  $offset  Offset
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param  int  $offset  Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param  int  $offset  Offset
     * @param  mixed  $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param  int  $offset  Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
