<?php
/**
 * TaxSubtotal
 *
 * PHP version 5
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Storecove API
 *
 * Storecove API
 *
 * OpenAPI spec version: 2.0.1
 * Contact: apisupport@storecove.nl
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.24
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Deegitalbe\LaravelTrustupIoStorecove\Model;

use ArrayAccess;
use Deegitalbe\LaravelTrustupIoStorecove\ObjectSerializer;

/**
 * TaxSubtotal Class Doc Comment
 *
 * @category Class
 *
 * @description The total amount of tax of this type in the invoice.
 *
 * @author   Swagger Codegen team
 *
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TaxSubtotal implements ArrayAccess, ModelInterface
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'TaxSubtotal';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'taxable_amount' => 'float',
        'tax_amount' => 'float',
        'percentage' => 'float',
        'category' => 'string',
        'country' => '\Deegitalbe\LaravelTrustupIoStorecove\Model\Country',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'taxable_amount' => null,
        'tax_amount' => null,
        'percentage' => null,
        'category' => null,
        'country' => null,
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'taxable_amount' => 'taxableAmount',
        'tax_amount' => 'taxAmount',
        'percentage' => 'percentage',
        'category' => 'category',
        'country' => 'country',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'taxable_amount' => 'setTaxableAmount',
        'tax_amount' => 'setTaxAmount',
        'percentage' => 'setPercentage',
        'category' => 'setCategory',
        'country' => 'setCountry',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'taxable_amount' => 'getTaxableAmount',
        'tax_amount' => 'getTaxAmount',
        'percentage' => 'getPercentage',
        'category' => 'getCategory',
        'country' => 'getCountry',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CATEGORY_STANDARD = 'standard';

    const CATEGORY_ZERO_RATED = 'zero_rated';

    const CATEGORY_REVERSE_CHARGE = 'reverse_charge';

    const CATEGORY_INTRA_COMMUNITY = 'intra_community';

    const CATEGORY_EXEMPT = 'exempt';

    const CATEGORY_EXPORT = 'export';

    const CATEGORY_OUTSIDE_SCOPE = 'outside_scope';

    const CATEGORY_REGULATION33_EXEMPT = 'regulation33_exempt';

    const CATEGORY_NONREGULATION33_EXEMPT = 'nonregulation33_exempt';

    const CATEGORY_DEEMED_SUPPLY = 'deemed_supply';

    const CATEGORY_SRCA_S = 'srca_s';

    const CATEGORY_SRCA_C = 'srca_c';

    const CATEGORY_NOT_REGISTERED = 'not_registered';

    const CATEGORY_IGST = 'igst';

    const CATEGORY_CGST = 'cgst';

    const CATEGORY_SGST = 'sgst';

    const CATEGORY_CESS = 'cess';

    const CATEGORY_STATE_CESS = 'state_cess';

    const CATEGORY_SROVR = 'srovr';

    const CATEGORY_SROVR_RS = 'srovr_rs';

    const CATEGORY_SROVR_LVG = 'srovr_lvg';

    const CATEGORY_SRLVG = 'srlvg';

    const CATEGORY_BOLLO_VIRTUALE = 'bollo_virtuale';

    const CATEGORY_EXEMPT_IT_N1 = 'exempt_it_n1';

    const CATEGORY_SALES = 'sales';

    const CATEGORY_SERVICE = 'service';

    const CATEGORY_TOURISM = 'tourism';

    const CATEGORY_HIGH_VALUE_GOODS = 'high_value_goods';

    const CATEGORY_LOW_VALUE_GOODS = 'low_value_goods';

    const CATEGORY_SALES_ZERO = 'sales_zero';

    const CATEGORY_SERVICE_ZERO = 'service_zero';

    const CATEGORY_NOT_APPLICABLE = 'not_applicable';

    const CATEGORY_STANDARD_CA = 'standard_ca';

    const CATEGORY_STANDARD_NA = 'standard_na';

    const CATEGORY_STANDARD_RE = 'standard_re';

    const CATEGORY_STANDARD_N33 = 'standard_n33';

    const CATEGORY_STANDARD_33 = 'standard_33';

    const CATEGORY_IMPORT_SERVICE = 'import_service';

    const CATEGORY_IMPORT_33_SERVICE = 'import_33_service';

    const CATEGORY_IMPORT_N33_SERVICE = 'import_n33_service';

    const CATEGORY_IMPORT_REVERSE_CHARGE_SERVICE = 'import_reverse_charge_service';

    const CATEGORY_IMPORT_GOODS = 'import_goods';

    const CATEGORY_IMPORT_33_GOODS = 'import_33_goods';

    const CATEGORY_IMPORT_N33_GOODS = 'import_n33_goods';

    const CATEGORY_IMPORT_REVERSE_CHARGE_GOODS = 'import_reverse_charge_goods';

    const CATEGORY_IMPORT_MES = 'import_mes';

    const CATEGORY_IMPORT_GST_DS = 'import_gst_ds';

    const CATEGORY_BLOCKED = 'blocked';

    const CATEGORY_EXEMPT_PURCHASE = 'exempt_purchase';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCategoryAllowableValues()
    {
        return [
            self::CATEGORY_STANDARD,
            self::CATEGORY_ZERO_RATED,
            self::CATEGORY_REVERSE_CHARGE,
            self::CATEGORY_INTRA_COMMUNITY,
            self::CATEGORY_EXEMPT,
            self::CATEGORY_EXPORT,
            self::CATEGORY_OUTSIDE_SCOPE,
            self::CATEGORY_REGULATION33_EXEMPT,
            self::CATEGORY_NONREGULATION33_EXEMPT,
            self::CATEGORY_DEEMED_SUPPLY,
            self::CATEGORY_SRCA_S,
            self::CATEGORY_SRCA_C,
            self::CATEGORY_NOT_REGISTERED,
            self::CATEGORY_IGST,
            self::CATEGORY_CGST,
            self::CATEGORY_SGST,
            self::CATEGORY_CESS,
            self::CATEGORY_STATE_CESS,
            self::CATEGORY_SROVR,
            self::CATEGORY_SROVR_RS,
            self::CATEGORY_SROVR_LVG,
            self::CATEGORY_SRLVG,
            self::CATEGORY_BOLLO_VIRTUALE,
            self::CATEGORY_EXEMPT_IT_N1,
            self::CATEGORY_SALES,
            self::CATEGORY_SERVICE,
            self::CATEGORY_TOURISM,
            self::CATEGORY_HIGH_VALUE_GOODS,
            self::CATEGORY_LOW_VALUE_GOODS,
            self::CATEGORY_SALES_ZERO,
            self::CATEGORY_SERVICE_ZERO,
            self::CATEGORY_NOT_APPLICABLE,
            self::CATEGORY_STANDARD_CA,
            self::CATEGORY_STANDARD_NA,
            self::CATEGORY_STANDARD_RE,
            self::CATEGORY_STANDARD_N33,
            self::CATEGORY_STANDARD_33,
            self::CATEGORY_IMPORT_SERVICE,
            self::CATEGORY_IMPORT_33_SERVICE,
            self::CATEGORY_IMPORT_N33_SERVICE,
            self::CATEGORY_IMPORT_REVERSE_CHARGE_SERVICE,
            self::CATEGORY_IMPORT_GOODS,
            self::CATEGORY_IMPORT_33_GOODS,
            self::CATEGORY_IMPORT_N33_GOODS,
            self::CATEGORY_IMPORT_REVERSE_CHARGE_GOODS,
            self::CATEGORY_IMPORT_MES,
            self::CATEGORY_IMPORT_GST_DS,
            self::CATEGORY_BLOCKED,
            self::CATEGORY_EXEMPT_PURCHASE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param  mixed[]  $data  Associated array of property values
     *                         initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->container['taxable_amount'] = isset($data['taxable_amount']) ? $data['taxable_amount'] : null;
        $this->container['tax_amount'] = isset($data['tax_amount']) ? $data['tax_amount'] : null;
        $this->container['percentage'] = isset($data['percentage']) ? $data['percentage'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['tax_amount'] === null) {
            $invalidProperties[] = "'tax_amount' can't be null";
        }
        $allowedValues = $this->getCategoryAllowableValues();
        if (! is_null($this->container['category']) && ! in_array($this->container['category'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'category', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['country'] === null) {
            $invalidProperties[] = "'country' can't be null";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets taxable_amount
     *
     * @return float
     */
    public function getTaxableAmount()
    {
        return $this->container['taxable_amount'];
    }

    /**
     * Sets taxable_amount
     *
     * @param  float  $taxable_amount  The amount on which the tax is levied.
     * @return $this
     */
    public function setTaxableAmount($taxable_amount)
    {
        $this->container['taxable_amount'] = $taxable_amount;

        return $this;
    }

    /**
     * Gets tax_amount
     *
     * @return float
     */
    public function getTaxAmount()
    {
        return $this->container['tax_amount'];
    }

    /**
     * Sets tax_amount
     *
     * @param  float  $tax_amount  The amount of tax.
     * @return $this
     */
    public function setTaxAmount($tax_amount)
    {
        $this->container['tax_amount'] = $tax_amount;

        return $this;
    }

    /**
     * Gets percentage
     *
     * @return float
     */
    public function getPercentage()
    {
        return $this->container['percentage'];
    }

    /**
     * Sets percentage
     *
     * @param  float  $percentage  The tax percentage. This should be a valid tax percentage in the country at the time of the taxpointDate of this invoice.
     * @return $this
     */
    public function setPercentage($percentage)
    {
        $this->container['percentage'] = $percentage;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param  string  $category  The tax category. For a description see <<_openapi_tax>>
     * @return $this
     */
    public function setCategory($category)
    {
        $allowedValues = $this->getCategoryAllowableValues();
        if (! is_null($category) && ! in_array($category, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'category', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets country
     *
     * @return \Deegitalbe\LaravelTrustupIoStorecove\Model\Country
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param  \Deegitalbe\LaravelTrustupIoStorecove\Model\Country  $country  The country levying the tax.
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  int  $offset  Offset
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param  int  $offset  Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param  int  $offset  Offset
     * @param  mixed  $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param  int  $offset  Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
